JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
R
*.r
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.r-project.org
FALSE
#

0
5
# EditPad's R scheme
r <- function(a, b, c) {
  print("Hello World!")
  `score!` <- a[10] * b[['hi']]
}

1
0
0

0
19
Prompt

^>
FALSE
FALSE
sec
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

#.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>if|else|repeat|while|function|for|in|next|break|TRUE|FALSE|NULL|Inf|NaN|NA(?:_(?:integer|real|complex|character)_)?+)\M|\.\.(?:\.|\d\M)
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\m0x[0-9A-F]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Numeric, integer and imaginary constants

\m(?:[0-9]++(?:\.[0-9]*+)?|\.[0-9]++)(?:[eE][+-]?+[0-9]++)?[Li]?\M
FALSE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string
Closing quote optional so an unclosed string is still colored as a string
(')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE
'
0
0
TRUE
0
0
0
0
0
0
Double-quoted string
Closing quote optional so an unclosed string is still colored as a string
(")[^"\\\v]*+(?:\\(?:.|$)[^"\\\v]*+)*+(")?
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
User-defined operator

(%)[^%\v]*+(%)?
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

code
FALSE
%
0
0
TRUE
0
0
0
0
0
0
Backtick-quoted identifier

(`)[^`\v]*+(`)?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2
BT
sql
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Operator

[-+*/^=<>!&|~$:]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
0
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
0
3
TRUE
0
0
0
0
0
0
Double brackets
We highlight double brackets separately, so bracket matching won't use half a double bracket to match a single bracket
\[\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[[]]
code
FALSE
]]
0
0
TRUE
0
0
0
0
0
0
Double brackets
We highlight double brackets separately, so bracket matching won't use half a double bracket to match a single bracket
\]\]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[[]]
code
FALSE
[[
0
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Comma

,
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
0
