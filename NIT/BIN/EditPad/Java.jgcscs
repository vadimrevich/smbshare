JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Java
*.java;*.jav;*.jsp;*.jsl
Just Great Software
support@editpadpro.com
http://www.editpadpro.com

FALSE
//

0
6
// comment
/** EditPad's Java scheme */
public static void Test() {
  Number = 1_234;
  String = "abcdef";
}

1
0
0

0
19
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Documentation comment

/\*\*(?!/)
FALSE
TRUE
doccomm
0


-1
1
3
FALSE
FALSE
FALSE
0

/****/
code
FALSE
*/
0
0
TRUE
0
0
0
0
0
0
Multi-line comment

/\*
FALSE
TRUE
comm
0


-1
2
3
FALSE
FALSE
FALSE
0

/**/
code
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing bracket

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
String
Closing quote optional so an unclosed string is still colored as a string
(")[^"\\\v]*+(?:\\(?:.|$)[^"\\\v]*+)*+(")?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Character
Closing quote optional so an unclosed string is still colored as a string
(')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE
1
2

code
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Hexadecimal number
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m0x[0-9A-F][0-9A-F_]*+L?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Binary number
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m0b[01][01_]*+L?+\M
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[DF]?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m[0-9][0-9_]*+[DFL]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

10
\m(?>
# Keywords
abstract|as(?:sert)|boolean|break|byte|case|catch|char|class|continue|def(?:ault)?|do(?:uble)?|else|enum|exports|extends|final(?:ly)?|float|for|if|implements|import|int(?:erface)?|in(?:stanceof)?|long|module|native|new|package|private|protected|public|requires|return|short|static|strictfp|super|switch|synchronized|this|throws?|transient|try|void|volatile|while|
# Literal values
true|false|null|
# Special identifier
var|
# Unused
const|goto
)\M
FALSE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Don't repeat the character class so (/* is properly highlighted as a comment after a bracket
[-+*/=<>%&^|!~?]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
@interface
Treat @interface as a reserved word rather than as an annotation
@interface\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Annotation

@\w+
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
0
2
Documentation comment
1
doccomm
2



0
0

0
1
Closing */

\*/
FALSE
FALSE
doccomm
0


-1
0
3
FALSE
FALSE
FALSE

0
/****/
code
FALSE
/**
0
0
TRUE
0
0
0
0
0
0
Comment
1
comm
2



0
0

0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
0
3
FALSE
FALSE
FALSE

0
/**/
code
FALSE
/*
0
0
TRUE
0
0
0
0
0
0
