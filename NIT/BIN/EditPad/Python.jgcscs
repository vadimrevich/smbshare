JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Python
*.py
Just Great Software
support@editpadpro.com
http://www.editpadpro.com/cscs.html
http://www.python.org
TRUE
#

0
5
# EditPad's Python scheme
if test(ok):
    numbers = [1234, 3.14]
else:
    string = u'abcdef'

1
0
0

0
20
Comment

#.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>False|None|True|and|as(?:sert|ync)?|await|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|raise|return|try|while|with|yield)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\m0x(?:_?+[0-9A-F]++)++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Octal number

\m0o(?:_?+[0-7]++)++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Binary number

\m0b(?:_?+[01]++)++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Floating point number
J after a number makes it imaginary
5
(?(DEFINE)(?<int>[0-9]++(?:_[0-9]++)*+))
\m(?P>int)\.(?P>int)?(?:e[+-]?(?P>int))?+\M
|
\.?(?P>int)e[+-]?(?P>int)\M

TRUE
FALSE
float
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m(?:[1-9][0-9]*+(?:_++[0-9]++)*+|0++(?:_0++)*+)L?\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/%<>=&|^~!@]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Colon

:
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
TRUE
0
0
2
1
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
0
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Comma

,
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Triple-single-quoted string
Triple-quoted strings can be multiline.  Triple quotes can be escaped with a backslash.
((?>[bfu]r?|r[bf]?)?+''')[^'\\]*+(?:(?:\\.|'{1,2}(?!'))[^'\\]*+)*+(''')?
TRUE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1
2

code
FALSE
'''
2
0
TRUE
0
0
0
0
0
0
Triple-double-quoted string
Triple-quoted strings can be multiline.  Triple quotes can be escaped with a backslash.
((?>[bfu]r?|r[bf]?)?+""")[^"\\]*+(?:(?:\\.|"{1,2}(?!"))[^"\\]*+)*+(""")?
TRUE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1
2

code
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
Single-quoted string
String delimited by single quotes.  Quotes can appear in the string if they are escaped with a \
((?>[bfu]r?|r[bf]?)?+')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
TRUE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
'
0
0
TRUE
0
0
0
0
0
0
Double-quoted string
String delimited by double quotes.  Quotes can appear in the string if they are escaped with a \
((?>[bfu]r?|r[bf]?)?+")[^"\\\v]*+(?:\\(?:.|$)[^"\\\v]*+)*+(")?
TRUE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
0
0
