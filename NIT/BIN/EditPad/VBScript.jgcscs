JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
VBScript
*.vbs
Just Great Software
support@editpadpro.com
http://www.editpadpro.com/
https://docs.microsoft.com/en-us/previous-versions/t0aew7h6(v=vs.85)
TRUE
'

0
8
Rem Editpad's VBScript Scheme
Public Sub Test
  If AString = "abcdef" Then
    ANumber = cos(1234)
  Else
    ADate = #2005/05/19#
  End If
End Sub

1
0
0

0
34
String
The closing " is optional, so unterminated strings are colored as well
(")[^"\v]*+("c?)?
TRUE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

vb
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Date
Closing # is optional, so unterminated dates are colored as well
(#)[^#\v]*+(#)?
FALSE
FALSE
date
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

vb
FALSE
#
2
0
TRUE
0
0
0
0
0
0
Comment

'.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

\mRem\M.*+
TRUE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
3
Sub

(?<![.\w])Sub(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Sub
vb
FALSE
End Sub
1
1
FALSE
1
0
3
1
0
3
End Sub

(?<![.\w])End\h++Sub(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Sub
vb
FALSE
Sub
0
1
FALSE
1
2
1
0
0
3
Function

(?<![.\w])Function(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Function
vb
FALSE
End Function
1
1
FALSE
1
0
3
1
0
3
End Function

(?<![.\w])End\h++Function(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Function
vb
FALSE
Function
0
1
FALSE
1
2
1
0
0
3
Single line If

(?<![.\w])If(?![.\w])(?=.*?\hThen\h+\S)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
0
0
0
0
3
If

(?<![.\w])If(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

If
vb
FALSE
End If
1
1
FALSE
1
0
3
1
0
3
Else

(?<![.\w])(?:Case\h++)?+Else(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
1
1
0
3
ElseIf

(?<![.\w])ElseIf(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End If

(?<![.\w])End\h++If(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
If
vb
FALSE
If
0
1
FALSE
1
2
1
0
0
3
Select Case

(?<![.\w])Select\h++Case(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Select
vb
FALSE
End Select
1
1
FALSE
1
0
3
1
0
3
First Case
First Case should not be outdented
(?<![.\w])Case(?![.\w])(?<=^\h*+Select\h++Case.*?\R\h*+Case)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
0
2
3
1
0
3
Case

(?<![.\w])Case(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End Select

(?<![.\w])End\h++Select(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Select
vb
FALSE
Select Case
0
1
FALSE
1
4
1
0
0
3
Do

(?<![.\w])Do(?:\h++(?>While|Until))?(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Loop
vb
FALSE
Loop
1
1
FALSE
1
0
3
1
0
3
Loop

(?<![.\w])Loop(?:\h++(?>While|Until))?(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Loop
vb
FALSE
Do
0
1
FALSE
1
2
0
0
0
3
While

(?<![.\w])While(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

While
vb
FALSE
Wend
1
1
FALSE
1
0
3
1
0
3
Wend

(?<![.\w])Wend(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
While
vb
FALSE
While
0
1
FALSE
1
2
1
0
0
3
For

(?<![.\w])For(?:\h++Each)?(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

For
vb
FALSE
Next
1
1
FALSE
1
0
0
0
0
3
Next

(?<![.\w])Next(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
For
vb
FALSE
For
0
1
FALSE
1
2
1
0
0
3
Exit
We need to match Exit statements as a whole to make sure the second keyword isn't matched as the start of a block
(?<![.\w])Exit(?>\h++(?:Do|For|Function|Select|Sub|While))?(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
1
2
1
1
0
3
Reserved word

(?<![.\w])(?>And|Call|Class|Const|Declare(?:\h++(?:Function|Sub))?|Default|Dim|Each|Empty|End|Eqv|Erase|Error|Execute|False|I[ns]|Imp|Mod|New|Not(?:hing)?|Null|O[rn]|Option\h++Explicit|Private|Property\h++[GLS]et|Public|Randomize|ReDim|Resume|Select|Set|Step|Stop|Then|To|True|Until|With|Xor)(?![.\w])
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
3
Built-in functions

(?<![.\w])(?>Abs|andTrim|Array|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|Date(?:Add|Diff|Part|Serial|Value)?|Day|DerivedMath|Escape|Eval|Exp|Filter|Fix|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr(?:Rev)?|Int|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Join|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|Maths|Mid|Minute|Month(?:Name)?|MsgBox|Now|Oct|Replace|RGB|Right|Rnd|Round|RTrim|ScriptEngine(?:BuildVersion|MajorVersion|MinorVersion)?|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Time(?:r|Serial|Value)?|TypeName|UBound|UCase|Unescape|VarType|Weekday(?:Name)?|Year)(?![.\w])
TRUE
FALSE
func
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Built-in constants

16
(?<![.\w])(?>vb(?>
# Colors
Black|Red|Green|Yellow|Blue|Magenta|Cyan|White|
# Comparison
BinaryCompare|TextCompare|
# Date and time
Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|UseSystemDayOfWeek|FirstJan1|FirstFourDays|FirstFullWeek|
# Misc
ObjectError|
# MsgBox
OK(?:Only|Cancel)?|Cancel|Abort(?:RetryIgnore)?|Retry(?:Cancel)?|Ignore|Yes(?:No(?:Cancel)?)?|No|
Critical|Question|Exclamation|Information|DefaultButton[1234]|ApplicationModal|SystemModal|
# String
Cr(?:Lf)?|FormFeed|Lf|NewLine|NullChar|NullString|Tab|VerticalTab
# Tristate
UseDefault|True|False))(?![.\w])
TRUE
FALSE
const
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++[%&SIL]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
1
Real

\m(?:[0-9]++)?\.?[0-9]+(?:e[+-]?[0-9]+)?[@!#FRD]?
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
1
Hex number

&H[0-9A-F]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
1
Octal number

&O[0-7]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
1
Operator

[-+*/\\^&<=>]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

(vb)
vb
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
(vb)
vb
FALSE
(
2
0
TRUE
0
0
0
0
0
0
0
0
