JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
ASP.NET VB
*.aspx;*.asax;*.ascx
Just Great Software
support@editpadpro.com
http://www.editpadpro.com/

TRUE
<!--
-->
1
ASP.NET page using VB.NET as the programming language.
11
<%@ Page Language="VB"%>
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Comment with a link http://www.editpadpro.com/ -->
<body bgcolor="white" text='black'>
<p><%#If AllIsWell Then
        'VB.NET code here
        ANumber = 1234
        AString = "abcdef"
        ADate = #2005/05/19#
      End If Rem AllIsWell%></p>
</body></html>

0
29
0

0
23
ASP script closing tag
We didn't include this in the ASP script tag match, so the %> would always be colored as we want it, even if there is an unterminated comment or string in the code
\G%>
FALSE
FALSE
codehl
0


-1
-1
3
FALSE
FALSE
FALSE

0
<% %>

FALSE
<%
2
0
TRUE
0
0
0
0
0
0
Script closing tag
We didn't include this in the ASP script tag match, so </script> would always be colored as we want it, even if there is an unterminated comment or string in the code
\G</script>
FALSE
FALSE
codehl
0


6
-1
3
FALSE
FALSE
FALSE

0
script
xml
FALSE
<script>
2
0
TRUE
0
0
0
0
0
0
ASP Expression

(<%[$@])[^<>%]++(%>)
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE
1
2


FALSE

0
0
TRUE
0
0
0
0
0
0
ASP script tag

<%#?.*?(?=%>|\z)
FALSE
TRUE
codehl
0


1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
XML script tag

<script[^<>]*+>.*?(?=</script>|\z)
FALSE
TRUE
codehl
0


1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Empty tag
<tag.../>
<\i[^<>]{0,9999}+(?<=/)>
FALSE
FALSE
mu
0


2
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening tag
<tag> for which </tag> is expected
<(\i\c*+)[^<>]{0,9999}+>
FALSE
FALSE
mu
0


2
-1
3
FALSE
FALSE
FALSE
0

\1
xml
FALSE
</\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete opening tag
Excluded from bracket matching
<(\i\c*+)[^<>]{0,9999}+
FALSE
FALSE
mu
0


2
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing tag
</tag>
</(\i\c*+)\s*+>
FALSE
FALSE
mu
0


6
-1
3
FALSE
FALSE
FALSE

0
\1
xml
FALSE
<\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete closing tag
Excluded from bracket matching
</(\i\c*+)\s*+
FALSE
FALSE
mu
0


6
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

<!--
FALSE
FALSE
comm
0


-1
10
3
FALSE
FALSE
FALSE
0

<!-->
xml
FALSE
-->
2
0
TRUE
0
0
0
0
0
0
CDATA

<!\[CDATA\[
FALSE
FALSE
str
0


-1
11
3
FALSE
FALSE
FALSE
0

[CDATA]
xml
FALSE
]]>
2
0
TRUE
0
0
0
0
0
0
DTD Tag

<!\i\c*+
FALSE
FALSE
mu
0


-1
13
3
FALSE
FALSE
FALSE
0

<!>
xml
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Processing instruction

<\?
FALSE
FALSE
preproc
0


-1
12
3
FALSE
FALSE
FALSE
0

<?
xml
FALSE
?>
2
0
TRUE
0
0
0
0
0
0
Entity

&(?:#\d++|#x[\dA-Z]++|\w++);
FALSE
FALSE
mue
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Stray opening angle
Bracket pairing left blank so a stray opening angle is always unmatched
<
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE
0



FALSE

0
0
TRUE
0
0
0
0
0
0
Stray closing angle
Bracket pairing left blank so a stray closing angle is always unmatched
>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0


FALSE

0
0
TRUE
0
0
0
0
0
0


\(
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE
0

(content)
content
FALSE
)
2
0
TRUE
0
0
0
0
0
0


\)
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE

0
(content)
content
FALSE
(
2
0
TRUE
0
0
0
0
0
0


\[
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE
0

[content]
content
FALSE
]
2
0
TRUE
0
0
0
0
0
0


]
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE

0
[content]
content
FALSE
[
2
0
TRUE
0
0
0
0
0
0


{
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE
0

{content}
content
FALSE
}
2
0
TRUE
0
0
0
0
0
0


}
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE

0
{content}
content
FALSE
{
2
0
TRUE
0
0
0
0
0
0
0
16
VB
0

3
codehl
'

0
0

0
37
ASP tag
Since this is a detail subscheme, we need to color the opening tag too
\G<%#?
FALSE
FALSE
codehl
0


-1
-1
3
FALSE
FALSE
FALSE
0

<% %>

FALSE
%>
2
0
TRUE
0
0
0
0
0
0
Script tag
Since this is a detail subscheme, we need to color the opening tag too
\G<script[^<>]*+>\R?+
FALSE
FALSE
codehl
0


2
-1
3
FALSE
FALSE
FALSE
0

script
xml
FALSE
</script>
2
0
TRUE
0
0
0
0
0
0
String
The closing " is optional, so unterminated strings are colored as well
(")[^"\v]*+("c?)?
TRUE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

vb
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Preprocessor statement
Can be terminated by a comment
^[ \t]*+#.*?(?=$|'|Rem)
TRUE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Date
Closing # is optional, so unterminated dates are colored as well
(#)[^#\v]*+(#)?
FALSE
FALSE
date
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

vb
FALSE
#
2
0
TRUE
0
0
0
0
0
0
Documentation Comment

'''.*+
FALSE
FALSE
doccomm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

'.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

\mRem\M.*+
TRUE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Block
Keywords that begin a block terminated with End Keyword; If is omitted because End If is optional; Select is omitted because it may be written as Select Case
\m(?>AddHandler|Class|Enum|Function|Get|Interface|Module|Namespace|Operator|Property|RaiseEvent|RemoveHandler|Set|Structure|Sub|SyncLock|Try|While|With)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

\0
vb
FALSE
End \0
1
1
FALSE
1
0
3
1
0
0
End Block

\mEnd\h++((?>AddHandler|Class|Enum|Function|Get|Interface|Module|Namespace|Operator|Property|RaiseEvent|RemoveHandler|Set|Structure|Sub|SyncLock|Try|While|With))\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
\1
vb
FALSE
\1
0
1
FALSE
1
2
1
0
0
0
Single line If

\mIf\M(?=.*?\hThen\h+\S)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
0
0
0
0
3
If

\mIf\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

If
vb
FALSE
End If
1
1
FALSE
1
0
3
1
0
3
Else

\m(?:Case\h++)?+Else\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
1
1
0
3
ElseIf

\mElseIf\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End If

\mEnd\h++If\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
If
vb
FALSE
If
0
1
FALSE
1
2
1
0
0
3
Select Case

\mSelect(?:\h++Case)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Select
vb
FALSE
End Select
1
1
FALSE
1
0
3
1
0
3
First Case
First Case should not be outdented
\mCase\M(?<=^\h*+Select\h++Case.*?\R\h*+Case)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
0
2
3
1
0
3
Case

\mCase\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End Select

\mEnd\h++Select\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Select
vb
FALSE
Select Case
0
1
FALSE
1
4
1
0
0
3
Do

\mDo(?:\h++(?>While|Until))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Loop
vb
FALSE
Loop
1
1
FALSE
1
0
3
1
0
3
Loop

\mLoop(?:\h++(?>While|Until))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Loop
vb
FALSE
Do
0
1
FALSE
1
2
0
0
0
3
For

\mFor(?:\h++Each)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

For
vb
FALSE
Next
1
1
FALSE
1
0
0
0
0
3
Next

\mNext\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
For
vb
FALSE
For
0
1
FALSE
1
2
1
0
0
3
Skip/Take While
Match Skip/Take While as a whole so that While is not seen as the start of a block
\m(?>Skip|Take)\h++While\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE
While
0
0
TRUE
1
2
1
0
0
3
Resume
Match Resume Next as a whole so that Next is not seen as the end of a For loop
\mResume(?:\h++Next)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE
While
0
0
TRUE
1
2
1
0
0
3
Exit
We need to match Exit statements as a whole to make sure the second keyword isn't matched as the start of a block
\mExit(?>\h++(?:Do|For|Function|Property|Select|Sub|Try|While))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
1
2
1
1
0
3
Continue
We need to match Continue statements as a whole to make sure the second keyword isn't matched as the start of a block
\mContinue(?>\h++(?:Do|For|While))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
1
2
1
1
0
3
Reserved word
Reserved words not already matched by any of the preceding elements
22
\m(?>
AddressOf|Alias|And(?:Also)?|As|
Boolean|ByRef|Byte|ByVal|
Call|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Constraint|CLng|CObj|Const|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|
Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Double|
Each|End(?:If)?|Erase|Error|
False|Finally|Friend|
GetType|GetXMLNamespace|Global|GoSub|GoTo|
Handles|
Implements|Imports|In(?:herits|teger)?|Is(?:Not)?|
Let|Lib|Like|Long|
Me|Mod|MustInherit|MustOverride|MyBase|MyClass|
Narrowing|New|Not(?:hing|Inheritable|Overridable)?|
Object|O[fn]|Option(?:al)|Or(?:Else)|Out|Overloads|Overridable|Overrides|
ParamArray|Partial|Private|Protected|Public|
ReadOnly|ReDim|Return|
SByte|Shadows|Shared|Short|Single|Static|Step|Stop|String|
Then|Throw|To|True|TryCast|TypeOf|
UInteger|ULong|UShort|Using|
Variant|Wend|When|Widening|WithEvents|WriteOnly|
Xor
)\M
TRUE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
3
Integer

\m[0-9]++[%&SIL]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Real

\m(?:[0-9]++)?\.?[0-9]+(?:e[+-]?[0-9]+)?[@!#FRD]?
FALSE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hex number

&H[0-9A-F]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Octal number

&O[0-7]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/\\^&<=>]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
vb
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
vb
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
vb
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
vb
FALSE
{
0
0
TRUE
0
0
0
0
0
0
Opening tag detail
0
mu
3



0
0

0
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the opening tag elements in the main scheme
<
FALSE
FALSE
mud
0


-1
3
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
7
TRUE
0
0
0
0
0
0
Opening tag
3
mu
3



0
0

0
1
Opening tag
Guaranteed to be matched since this subscheme was toggled to after the opening angle was matched
\i\c*+
FALSE
FALSE
mu
0


-1
4
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Tag contents
3
mua
3



0
0
5
0
3
=

=\s*+
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Double-quoted value

"
FALSE
FALSE
muv
0


-1
8
3
FALSE
FALSE
FALSE
0

DQ
xml
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted value

'
FALSE
FALSE
muv
0


-1
9
3
FALSE
FALSE
FALSE
0

SQ
xml
FALSE
'
2
0
TRUE
0
0
0
0
0
0
End of tag
4
0
2
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Empty closing angle

/>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
Closing tag detail
0
mu
3



0
0

0
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the closing tag elements in the main scheme
</
FALSE
FALSE
mud
0


-1
7
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
8
TRUE
0
0
0
0
0
0
End of closing tag
3
mu
3



0
0

0
1
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
DQ Attribute
3
muv
3



0
0
5
0
2
Closing quote

"
FALSE
FALSE
muv
0


-1
4
3
FALSE
FALSE
FALSE

0
DQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
CSS color

(?<=[\s"'{;=])(?<CSS>#[0-9A-F]{3}(?:[0-9A-F](?:[0-9A-F]{2}(?:[0-9A-F]{2})?+)?+)?+|\m(?>aliceblue|antiquewhite|aqua(?:marine)?+|azure|beige|bisque|black|blanchedalmond|blue(?:violet)?+|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|dark(?>blue|cyan|goldenrod|gr[ae]y|green|khaki|magenta|olivegreen|orange|orchid|red|salmon|seagreen|slateblue|slategr[ae]y|turquoise|violet)|deep(?>pink|skyblue)|dimgr[ae]y|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold(?:enrod)?+|gr[ae]y|green(?:yellow)?+|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender(?:blush)?+|lawngreen|lemonchiffon|light(?>blue|coral|cyan|goldenrodyellow|gr[ae]y|green|pink|salmon|seagreen|skyblue|slategr[ae]y|steelblue|yellow)|lime(?:green)?+|linen|magenta|maroon|medium(?>aquamarine|blue|orchid|purple|seagreen|slateblue|springgreen|turquoise|violetred)|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive(?:drab)?+|orange(?:red)?+|orchid|pale(?:goldenrod|green|turquoise|violetred)|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slate(?>blue|gr[ae]y)|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white(?:smoke)?+|yellow(?:green)?+))\M
TRUE
FALSE
muv
0


-3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
SQ Attribute
3
muv
3



0
0
5
0
2
Closing quote

'
FALSE
FALSE
muv
0


-1
4
3
FALSE
FALSE
FALSE

0
SQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
CSS color

(?<=[\s"'{;=])(?<CSS>#[0-9A-F]{3}(?:[0-9A-F](?:[0-9A-F]{2}(?:[0-9A-F]{2})?+)?+)?+|\m(?>aliceblue|antiquewhite|aqua(?:marine)?+|azure|beige|bisque|black|blanchedalmond|blue(?:violet)?+|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|dark(?>blue|cyan|goldenrod|gr[ae]y|green|khaki|magenta|olivegreen|orange|orchid|red|salmon|seagreen|slateblue|slategr[ae]y|turquoise|violet)|deep(?>pink|skyblue)|dimgr[ae]y|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold(?:enrod)?+|gr[ae]y|green(?:yellow)?+|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender(?:blush)?+|lawngreen|lemonchiffon|light(?>blue|coral|cyan|goldenrodyellow|gr[ae]y|green|pink|salmon|seagreen|skyblue|slategr[ae]y|steelblue|yellow)|lime(?:green)?+|linen|magenta|maroon|medium(?>aquamarine|blue|orchid|purple|seagreen|slateblue|springgreen|turquoise|violetred)|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive(?:drab)?+|orange(?:red)?+|orchid|pale(?:goldenrod|green|turquoise|violetred)|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slate(?>blue|gr[ae]y)|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white(?:smoke)?+|yellow(?:green)?+))\M
TRUE
FALSE
muv
0


-3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
XML Comment
1
comm
2



0
0

0
2
Closing -->

-->
FALSE
FALSE
comm
0


-1
0
3
FALSE
FALSE
FALSE

0
<!-->
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
URL

(?:\m(?:(?:https?+|ftp|file)://|www|ftp)|//(?:www|ftp)\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])
TRUE
FALSE
ilink
1


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
CDATA
1
str
2



0
0

0
1
Closing tag

]]>
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
[CDATA]
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
Processing instruction
1
preproc
3



0
0

0
2
Closing ?>

\?>
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE

0
<?
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
Another tag
Though not valid in XML, we permit < tags to keep syntax coloring consistent while the file is being edited
(?=<)
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
DTD Tag
1
mua
3



0
0

0
7
Double-quoted value

"
FALSE
FALSE
muv
0


-1
15
3
FALSE
FALSE
FALSE
0

DTD DQ
xml
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted value

'
FALSE
FALSE
muv
0


-1
16
3
FALSE
FALSE
FALSE
0

DTD SQ
xml
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Closing >

>
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE

0
<!>
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
DTD Comment

--
FALSE
FALSE
comm
0


-1
14
3
FALSE
FALSE
FALSE
0

DTD --
xml
FALSE
--
2
0
TRUE
0
0
0
0
0
0
DTD Parameter

%(?:\i\c*+;)?
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
DTD Operator

[=(),|*+?]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Another tag
Though not valid in XML, we permit < tags to keep syntax coloring consistent while the file is being edited
(?=<)
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
DTD Comment
1
comm
2



0
0

0
3
Closing --

--
FALSE
FALSE
comm
0


-1
13
3
FALSE
FALSE
FALSE

0
DTD --
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing >

>
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE

0
<!>
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
URL

(?:\m(?:(?:https?+|ftp|file)://|www|ftp)|//(?:www|ftp)\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])
TRUE
FALSE
ilink
1


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
DTD DQ Value
1
str
3



0
0

0
2
Closing quote

"
FALSE
FALSE
muv
0


-1
13
3
FALSE
FALSE
FALSE

0
DTD DQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
Another tag
Though not valid in XML, we permit < tags to keep syntax coloring consistent while the file is being edited
(?=<)
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
DTD SQ Value
1
str
3



0
0

0
2
Closing quote

'
FALSE
FALSE
muv
0


-1
13
3
FALSE
FALSE
FALSE

0
DTD SQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
Another tag
Though not valid in XML, we permit < tags to keep syntax coloring consistent while the file is being edited
(?=<)
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
