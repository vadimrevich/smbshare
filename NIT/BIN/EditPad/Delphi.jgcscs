JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Delphi
*.pas;*.dpr;*.dpk
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.embarcadero.com/products/delphi
FALSE
//

1
Delphi source code
9
{$DEFINE DIRECTIVE}
// comment
procedure Test(X: Integer);
begin
  S := 'EditPad''s Delphi Scheme';
  Numbers[42] := $DECAF;
  asm MOVQ XMM0, RAX end;
  repeat until Done;
end;

1
0
0
3
0
8
Begin
Reserved words that pair up with "end"; "class" and "interface" are tricky because they only pair up with "end" in type definitions
\m(?>begin|case|record|try|initialization|(?<=\M(?:\s*+<[[:w:]\s:,]++>)?+\s*+=\s*+)(?:class|interface|object)(?!\s*+(?:(?:\([^);]*+\))?+\s*+;|of)))\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

beginend
code
FALSE
end
1
2
FALSE
0
0
0
0
0
2
End

\mend\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
beginend
code
FALSE
begin
1
3
FALSE
0
0
0
0
0
2
Repeat

\mrepeat\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

repeatuntil
code
FALSE
until
1
2
FALSE
0
0
0
0
0
2
Until

\muntil\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
repeatuntil
code
FALSE
repeat
1
1
FALSE
1
2
0
0
0
2
Property

\mproperty\M
TRUE
FALSE
keyword
0


-1
1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
2
Asm

\masm\M
TRUE
FALSE
keyword
0


-1
2
3
FALSE
FALSE
FALSE
0

beginend
code
FALSE
end
1
2
FALSE
0
0
0
0
0
2
Reserved words
Must be listed after "begin" so we can match "class" and "interface" with this element if the "begin" element doesn't match them
\m(?>absolute|abstract|and|array|as|assembler|automated|cdecl|class|const(?:ructor)?|deprecated|destructor|dispid|dispinterface|div|do(?:wnto)?|dynamic|else|except|exports?|external|far|file|finalization|finally|for(?:ward)?|function|goto|if|implementation|in(?:herited|line|terface)?|is|label|library|message|mod|near|nil|not|object|of|on|operator|or|out|overload|override|packed|pascal|platform|private|procedure|program|protected|public|published|raise|register|reintroduce|resourcestring|safecall|set|shl|shr|stdcall|strict|string|then|threadvar|to|type|unit|uses|var|virtual|while|with|xor)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE



code
FALSE

0
0
TRUE
0
0
0
0
0
2
Operator

[-+*@^<>=]++|/(?!/)|:=
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
4
Property
1

3



0
0
3
0
2
Reserved words
These words are only reserved in property definitions
\m(?>read|write|index|default|nodefault|string|array|stored)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
2
End of property definition

;
FALSE
FALSE

0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Asm
1

3



0
0
3
0
3
End

\mend\M
TRUE
FALSE
keyword
0


-1
0
3
FALSE
FALSE
FALSE

0
beginend
code
FALSE
begin
2
3
FALSE
0
0
0
0
0
2
Register

\m(?>[ER]?(?>[ABCD]X|[BS]P|[SD]I|R(?>[89]|1[0-5]))|[ABCD][HL]|FPR[0-7]|MMX[0-7]|[XYZ]MM(?>[02-9]|1[0-5]?+))\M
TRUE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Common
4
0
13
Float

\m[0-9]++(?:\.[0-9]++(?:E[+-]?[0-9]++)?+|E[+-]?[0-9]++)\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\$[A-F0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Character

#(?:\$[A-F0-9]++|[0-9]++)\M
TRUE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
String
Closing ' optional so unclosed strings are colored until the end of the line
(')(?:[^'\v]++|'')*+('?)
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
'
2
0
TRUE
0
0
0
0
57
0
// comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE
1
2
{$}

FALSE
}
2
0
TRUE
0
0
0
0
0
0
{ comment }
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE
1
2
{}

FALSE
}
2
0
TRUE
0
0
0
0
0
0
(* comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
comm
0


-1
4
3
FALSE
FALSE
FALSE
0

(**)

FALSE
*)
2
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
(*Comment*)
1
comm
2



0
0

0
1
Closing *)

\*\)
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
(**)

FALSE

0
0
TRUE
0
0
0
0
0
0
