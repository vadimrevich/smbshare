JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
PHP Hypertext Preprocessor
*.php;*.phtml
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.php.net
TRUE
<!--
-->
1
HTML files with embedded PHP scripts.
13
<html><head><title>PHP Example</title></head>
<body bgcolor=white text="black">
<!-- Comment with URL http://www.editpadpro.com/ <? // and PHP ?> -->
<h1 class="<?php echo $class ?>">Hello World</h1>
<script language="php">
  print ("PHP code goes $here");
  $ok = TRUE;
  if ($ok) { $three = $one + 1 + 1.0; };
</script>
<p>Some text<br>on two lines.</p>
<p>Relative <a href="other.html">link</a>.</p>
<p>Smile! &#x263A;</p>
</body></html>

0
29
0
36
0
14
PHP
PHP-style opening tag
<\?(php\M)?
TRUE
FALSE
mu
0


-1
2
3
FALSE
FALSE
TRUE
0

php

FALSE
?>
1
0
TRUE
0
0
0
0
0
2
ASP
ASP-style opening tag
<%
FALSE
FALSE
mu
0


-1
4
3
FALSE
FALSE
TRUE
0

asp

FALSE
%>
2
0
TRUE
0
0
0
0
0
0
PHP script tag
Include the trailing line break to make the code highlighting start on the next line
<script(?>[^<>]{0,99}?PHP)[^<>]{0,999}+(?<!/)>\R?+
TRUE
FALSE
mu
0


20
6
3
FALSE
FALSE
FALSE
0

script
html
FALSE
</script>
2
0
TRUE
0
0
0
0
0
0
Solo tag
<tag> that should not have a corresponding </tag> (defined as "empty" in HTML 4 DTD or as void in HTML5)
<(?>area|base|br|col|hr|img|input|link|meta|param|(?#html5)keygen|source|track|wbr)\M(?>[^<>]{1,999}+|<\?.{0,999}?\?>|<%.{0,999}?%>){0,99}+>?
TRUE
TRUE
mu
0


19
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening tag
<tag> that should have a corresponding </tag>; allow PHP code inside the tag so the entire tag can be paired with the closing tag; limit the amount of code for performance reasons when typing a new HTML tag before some PHP code that ultimately won't be inside the HTML tag
<([a-zA-Z][a-zA-Z0-9]*+)(?>[^<>]{1,999}+|<\?.{0,999}?\?>|<%.{0,999}?%>){0,99}+>
FALSE
TRUE
mu
0


20
-1
3
FALSE
FALSE
FALSE
0

\L1
html
FALSE
</\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete opening tag
Excluded from bracket matching
<([a-zA-Z][a-zA-Z0-9]*+)[^<>]{0,9999}+
FALSE
FALSE
mu
0


20
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing tag (invalid)
</tag> for a tag that should be emtpy
</(?>area|base|br|col|hr|img|input|link|meta|param|(?#html5)keygen|source|track|wbr)\M(?:\s*+>)?
TRUE
FALSE
mu
0


25
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing tag
</tag>
</([a-zA-Z][a-zA-Z0-9]*+)\s*+>
FALSE
FALSE
mu
0


25
-1
3
FALSE
FALSE
FALSE

0
\L1
html
FALSE
<\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete closing tag
Excluded from bracket matching
</([a-zA-Z][a-zA-Z0-9]*+)
FALSE
FALSE
mu
0


25
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
HTML comment

<!--
FALSE
TRUE
comm
0


-1
34
3
FALSE
FALSE
FALSE
0

<!-->
html
FALSE
-->
2
0
TRUE
0
0
0
0
0
0
Doctype

<!
FALSE
FALSE
preproc
0


-1
35
3
FALSE
FALSE
FALSE
0

doctype
html
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Stray opening angle
Bracket pairing left blank so a stray opening angle is always unmatched
<
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE
0



FALSE

0
0
TRUE
0
0
0
0
0
0
Stray closing angle
Bracket pairing left blank so a stray closing angle is always unmatched
>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0


FALSE

0
0
TRUE
0
0
0
0
0
0
Named Entity
HTML named entity
&(?:#[0-9]++|#x[0-9A-F]++|[A-Z][A-Z0-9]++);
TRUE
FALSE
mue
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
36
Begin PHP inside tag
4
1
Included by all the HTML tag detail subschemes to allow PHP code inside an HTML tag.
2
PHP
PHP-style opening tag
<\?(php\M)?
TRUE
FALSE
mu
0


-1
3
3
FALSE
FALSE
TRUE
0

php

FALSE
?>
1
0
TRUE
0
0
0
0
0
2
ASP
ASP-style opening tag
<%
FALSE
FALSE
mu
0


-1
5
3
FALSE
FALSE
TRUE
0

asp

FALSE
%>
2
0
TRUE
0
0
0
0
0
0
PHP
1

3
codehl
//

0
0
7	9
1
PHP code outside HTML tags.  This subscheme is toggled to by the main coloring scheme.
2
Closing
PHP-style closing tag
\?>|\z
FALSE
FALSE
mu
0


-1
-2
3
FALSE
FALSE
FALSE

0
php

FALSE
<?
2
0
TRUE
0
0
0
0
0
0
Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=\?>)|$)
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
PHP inside tag
3

3
codehl
//

0
0
8	9
3
PHP code inside HTML tags.  This subscheme is toggled to by the detail subschemes for HTML tags.

For performance reasons, the syntax coloring scheme system allows elements in detail subschemes to toggle only to "toggle within detail" subschemes.  Elements not in detail subschemes can only toggle to "toggle" and "toggle until end of line" subschemes.  So we need two sets of PHP subschemes, one of type "toggle" and one of type "toggle within detail".
2
Closing
PHP-style closing tag
\?>
FALSE
FALSE
mu
0


-1
-2
3
FALSE
FALSE
FALSE

0
php

FALSE
<?
2
0
TRUE
0
0
0
0
0
0
Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=\?>)|$)
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
ASP
1

3
codehl
//

0
0
7	9
0
2
Closing
ASP-style closing tag
%>|\z
FALSE
FALSE
mu
0


-1
0
3
FALSE
FALSE
FALSE

0
asp

FALSE
<%
2
0
TRUE
0
0
0
0
0
0
Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=%>)|$)
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
ASP inside tag
3

3
codehl
//

0
0
8	9
0
2
Closing
ASP-style closing tag
%>
FALSE
FALSE
mu
0


-1
-2
3
FALSE
FALSE
FALSE

0
asp

FALSE
<%
2
0
TRUE
0
0
0
0
0
0
Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=%>)|$)
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
PHP script
1

3
codehl
//

0
0
7	9
0
2
Closing
Closing tag
</script>
TRUE
FALSE
mu
0


25
0
3
FALSE
FALSE
TRUE

0
script
html
FALSE
<script language="php"'>
2
0
TRUE
0
0
0
0
0
0
Single-line comment
Note that the PHP closing tag is also considered end-of-line and will stop the comment and the PHP section.  We use zero-width positive lookahead (?=...) for the ?> as it is not part of the comment
(//|#).*?((?=</script>)|$)
TRUE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
PHP toggle
4
0
11
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
php
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
php
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Mutli-line comment

/\*
FALSE
TRUE
comm
0


-1
12
3
FALSE
FALSE
FALSE
0

/**/
php
FALSE
*/
0
0
TRUE
0
0
0
0
0
0
Single-quoted string

'
FALSE
FALSE
str
0


-1
14
3
FALSE
FALSE
FALSE
0

SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Double-quoted string

"
FALSE
FALSE
str
0


-1
10
3
FALSE
FALSE
FALSE
0

DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Execution operator

`
FALSE
FALSE
preproc
0


-1
17
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Heredoc
Properly finished heredoc.  A heredoc is started by an identifier preceded by <<< and terminated by the same identifier all by itself on a line without indentation.
(<<<([A-Za-z0-9_]++))\R.*?^(\2);?$
FALSE
TRUE
str
0


16
-1
1
FALSE
FALSE
FALSE
1
3

php
FALSE

0
0
TRUE
0
0
1
0
0
0
Open heredoc
Heredoc with missing terminator; we capture the line break after the identifier so that we can generate the closing line with the same line break style
(<<<([A-Za-z0-9_]++))(\R).*+
FALSE
TRUE
str
0


16
-1
1
FALSE
FALSE
FALSE
1


php
FALSE
\3\2;\3
1
0
TRUE
0
0
0
0
0
0
Nowdoc
Properly finished nowdoc.  A now is started by an identifier between single quotes and preceded by <<< and terminated by the same identifier all by itself on a line without indentation.
(<<<'([A-Za-z0-9_]++)')\R.*?^(\2);?$
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1
3

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Open nowdoc
Nowdoc with missing terminator; we capture the line break after the identifier so that we can generate the closing line with the same line break style
(<<<'([A-Za-z0-9_]++)')(\R).*+
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1


php
FALSE
\3\2;\3
1
0
TRUE
0
0
0
0
0
0
Upcoming nowdoc or heredoc
Nowdoc or heredoc with missing indentifier; prevents the ' from being seen as the start of the string; that would cause automatic bracket matching to generate a ' and then not generate the closing line after typing the newdoc identifier
<<<'?
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
0


php
FALSE

0
0
TRUE
0
0
0
0
0
0
PHP toggle inside tag
4
0
6
Opening brace
Break and indent is disabled to keep HTML tags on a single line
{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
php
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing brace
Break and indent is disabled to keep HTML tags on a single line
}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
php
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Mutli-line comment

/\*
FALSE
TRUE
comm
0


-1
13
3
FALSE
FALSE
FALSE
0

/**/
php
FALSE
*/
0
0
TRUE
0
0
0
0
0
0
Single-quoted string

'
FALSE
FALSE
str
0


-1
15
3
FALSE
FALSE
FALSE
0

SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Double-quoted string

"
FALSE
FALSE
str
0


-1
11
3
FALSE
FALSE
FALSE
0

DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Execution operator

`
FALSE
FALSE
preproc
0


-1
18
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
PHP common
4
0
12
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
php
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
php
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
php
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
php
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Reserved words

21
\m(?>
# Reserved words
abstract|and|array|as|break|
callable|case|catch|class|clone|const|continue|
declare|default|die|do|
echo|else(?:if)?|empty|enddeclare|endfor(?:each)?|endif|endswitch|endwhile|eval|exit|extends|
final(?:ly)?|for(?:each)?|function|
global|goto|
if|implements|include(?:_once)?|instanceof|insteadof|interface|isset|
list|namespace|new|or|
print|private|protected|public|
require(?:_once)?|return|
static|switch|
throw|trait|try|
unset|use|
var|while|xor|yield|
# Other reserved words (excluding constant values)
int|float|bool|string|void|iterable|object|
# Soft reserved words
resource|mixed|numeric
)\M
TRUE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m(?>[1-9][0-9]*+|0[0-7]*+)\M
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal

\m0x[a-f0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Binary

\m0b[01]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:->[A-Za-z_][A-Za-z0-9_]*+)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Constant values

\m(?>TRUE|FALSE|NULL|__(?>LINE|FILE|DIR|FUNCTION|CLASS|TRAIT|METHOD|NAMESPACE)__)\M
TRUE
FALSE
constv
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Operator
(don't repeat the character class, since that will disable heredoc code like $x=<<<x;
[-.=+*/<>|&!~?:%^@]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated string
1
str
14
codehl
//

0
0

0
4
Escaped character
Ensures escaped $ and " are skipped and allows character escapes to be highlighted differently
\\(?:[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u\{[0-9A-Fa-f]+\}|.)
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing "

"
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated string inside tag
3
str
14
codehl
//

0
0

0
4
Escaped character
Ensures escaped $ and " are skipped and allows character escapes to be highlighted differently
\\(?:[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u\{[0-9A-Fa-f]+\}|.)
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing "

"
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
PHP comment
1
comm
2
codehl
/*
*/
0
0
36
0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
php
FALSE
/*
2
0
TRUE
0
0
0
0
0
0
PHP Comment inside tag
3
comm
2
codehl
/*
*/
0
0
36
0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
php
FALSE
/*
2
0
TRUE
0
0
0
0
0
0
Single-quoted string
1
str
14
codehl
//

0
0

0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)' would fail to match the closing " in 'string\\'
\\.
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing '

'
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Single-quoted string inside tag
3
str
14
codehl
//

0
0

0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)' would fail to match the closing " in 'string\\'
\\.
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing '

'
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Here document
0
str
14
codehl
//

0
0

0
3
Escaped character

\\(?:[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u\{[0-9A-Fa-f]+\}|.)
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Execution operator
1
preproc
3
codehl
//

0
0

0
4
Escaped character
This element makes sure escaped ` and $ characters are skipped
\\.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing `

`
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Execution operator inside tag
3
preproc
3
codehl
//

0
0

0
4
Escaped character
This element makes sure escaped ` and $ characters are skipped
\\.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing `

`
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Solo tag detail
0
mu
3



0
0

1
We use separate subschemes for empty/void tags and opening tags so that we can differentiate between a > that should be treated as the end of an empty/void tag and a > that should be treated as the end of an opening tags for the purposes of automatic line breaks and indentation.  Other than the "break and indent" settings for the element matching the > there are no differences between the "solo tag" and "opening tag" subschemes.
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the opening tag elements in the main scheme
<
FALSE
FALSE
mud
0


-1
21
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
7
TRUE
0
0
0
0
0
0
Opening tag detail
0
mu
3



0
0

1
The element in the main coloring scheme matched the entire HTML tag so that it can be highlighed entirely when highlighting matching brackets.  This detail subscheme and the subschemes it toggles to then apply colors to the various parts of the HTML tag.
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the opening tag elements in the main scheme
<
FALSE
FALSE
mud
0


-1
22
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
7
TRUE
0
0
0
0
0
0
Solo tag
3
mu
3



0
0

0
1
Solo tag
Guaranteed to be matched since this subscheme was toggled to after the opening angle was matched
[a-zA-Z][a-zA-Z0-9]*+
FALSE
FALSE
mu
0


-1
23
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
2
Opening tag
3
mu
3



0
0

0
1
Opening tag
Guaranteed to be matched since this subscheme was toggled to after the opening angle was matched
[a-zA-Z][a-zA-Z0-9]*+
FALSE
FALSE
mu
0


-1
24
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
2
Solo tag contents
3
mua
3



0
2
1
0
2
Value
Attribute value
=\s*+
FALSE
FALSE
mud
0


-1
26
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle
Separate subschemes for solo tags allow us to treat > the same as /> for automatic break and indent
/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
Opening tag contents
3
mua
3



0
2
1
0
2
Value
Attribute value
=\s*+
FALSE
FALSE
mud
0


-1
27
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Closing tag
0
mu
3



0
2

0
2
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the closing tag elements in the main scheme
</
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
8
TRUE
0
0
0
0
0
0
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Solo tag value
3
muv
3



0
0
1	28
0
3
Double-quoted value
Attribute value enclosed by double quotes
(")
FALSE
FALSE
muv
0


-1
29
3
FALSE
FALSE
FALSE
1

DQattr
html
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted value
Attribute value enclosed by single quotes
(')
FALSE
FALSE
muv
0


-1
31
3
FALSE
FALSE
FALSE
1

SQattr
html
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE
<
2
9
TRUE
0
0
0
0
0
0
Opening tag value
3
muv
3



0
0
1	28
0
3
Double-quoted value
Attribute value enclosed by double quotes
(")
FALSE
FALSE
muv
0


-1
30
3
FALSE
FALSE
FALSE
1

DQattr
html
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted value
Attribute value enclosed by single quotes
(')
FALSE
FALSE
muv
0


-1
32
3
FALSE
FALSE
FALSE
1

SQattr
html
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Closing angle

/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
Attribute value
4
0
2
CSS color

(?<=[\s"'{;=])(?<CSS>#[0-9A-F]{3}(?:[0-9A-F](?:[0-9A-F]{2}(?:[0-9A-F]{2})?+)?+)?+|\m(?>aliceblue|antiquewhite|aqua(?:marine)?+|azure|beige|bisque|black|blanchedalmond|blue(?:violet)?+|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|dark(?>blue|cyan|goldenrod|gr[ae]y|green|khaki|magenta|olivegreen|orange|orchid|red|salmon|seagreen|slateblue|slategr[ae]y|turquoise|violet)|deep(?>pink|skyblue)|dimgr[ae]y|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold(?:enrod)?+|gr[ae]y|green(?:yellow)?+|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender(?:blush)?+|lawngreen|lemonchiffon|light(?>blue|coral|cyan|goldenrodyellow|gr[ae]y|green|pink|salmon|seagreen|skyblue|slategr[ae]y|steelblue|yellow)|lime(?:green)?+|linen|magenta|maroon|medium(?>aquamarine|blue|orchid|purple|seagreen|slateblue|springgreen|turquoise|violetred)|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive(?:drab)?+|orange(?:red)?+|orchid|pale(?:goldenrod|green|turquoise|violetred)|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slate(?>blue|gr[ae]y)|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white(?:smoke)?+|yellow(?:green)?+))\M
TRUE
FALSE
muv
0


-3
24
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Unquoted value

[^\s"'=<>`]++
FALSE
FALSE
muv
0


-1
24
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
30
0
Solo tag double-quoted value
3
muv
15



0
0
1	33	36
0
2
Closing quote

"
FALSE
FALSE
muv
0


-1
24
3
FALSE
FALSE
FALSE

0
DQattr
html
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle

/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
Opening tag double-quoted value
3
muv
15



0
0
1	33	36
0
2
Closing quote

"
FALSE
FALSE
muv
0


-1
24
3
FALSE
FALSE
FALSE

0
DQattr
html
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle

/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Solo tag single-quoted value
3
muv
15



0
0
1	33	36
0
2
Closing quote

'
FALSE
FALSE
muv
0


-1
24
3
FALSE
FALSE
FALSE

0
SQattr
html
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle

/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
Opening tag single-quoted value
3
muv
15



0
0
1	33	36
0
2
Closing quote

'
FALSE
FALSE
muv
0


-1
24
3
FALSE
FALSE
FALSE

0
SQattr
html
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing angle

/?>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Quoted attribute value
4
0
3
CSS color

(?<=[\s"'{;=])(?<CSS>#[0-9A-F]{3}(?:[0-9A-F](?:[0-9A-F]{2}(?:[0-9A-F]{2})?+)?+)?+|\m(?>aliceblue|antiquewhite|aqua(?:marine)?+|azure|beige|bisque|black|blanchedalmond|blue(?:violet)?+|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|dark(?>blue|cyan|goldenrod|gr[ae]y|green|khaki|magenta|olivegreen|orange|orchid|red|salmon|seagreen|slateblue|slategr[ae]y|turquoise|violet)|deep(?>pink|skyblue)|dimgr[ae]y|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold(?:enrod)?+|gr[ae]y|green(?:yellow)?+|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender(?:blush)?+|lawngreen|lemonchiffon|light(?>blue|coral|cyan|goldenrodyellow|gr[ae]y|green|pink|salmon|seagreen|skyblue|slategr[ae]y|steelblue|yellow)|lime(?:green)?+|linen|magenta|maroon|medium(?>aquamarine|blue|orchid|purple|seagreen|slateblue|springgreen|turquoise|violetred)|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive(?:drab)?+|orange(?:red)?+|orchid|pale(?:goldenrod|green|turquoise|violetred)|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slate(?>blue|gr[ae]y)|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white(?:smoke)?+|yellow(?:green)?+))\M
TRUE
FALSE
muv
0


-3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Relative link to text file

(?<=(?:href|src)=")((?:\.\.[\\/])?(?:[-A-Z0-9+&@%=~_$!:,.]++[\\/])*+[-A-Z0-9+&@%=~_$!:,.]+\.(?:html?|xhtml|asp|as[pach]x|php|js(on|p)?|css|p[ly]|rbx?|erb|rss|xml|xs[dl]?|xslt))
TRUE
FALSE
llink
2
\1

-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Relative link to other file

(?<=(?:href|src)=")((?:\.\.[\\/])?(?:[-A-Z0-9+&@%=~_$!:,.]++[\\/])*+[-A-Z0-9+&@%=~_$!:,.]++)
TRUE
FALSE
llink
1
\1

-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
HTML Comment
1
comm
3



0
0
36
0
1
Closing -->

-->
FALSE
FALSE
comm
0


-1
0
3
FALSE
FALSE
FALSE

0
<!-->
html
FALSE

0
0
TRUE
0
0
0
0
0
0
Doctype
1
preproc
3



0
0

0
2
Closing >

>
FALSE
FALSE
preproc
0


-1
0
3
FALSE
FALSE
FALSE

0
doctype
html
FALSE

0
0
TRUE
0
0
0
0
0
0
URL

(?:\m(?:(?:https?+|ftp|file)://|www|ftp)|//(?:www|ftp)\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])
TRUE
FALSE
ilink
1


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
URL
4
0
2
URL

(?:\m(?:(?:https?+|ftp|file)://|www|ftp)|//(?:www|ftp)\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])
TRUE
FALSE
ilink
1


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
email address

\m(?:mailto:)?+[A-Z0-9][A-Z0-9._%+-]*+@(?:[A-Z0-9-]++\.)++[A-Z]{2,}+\M
TRUE
FALSE
ilink
3


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
