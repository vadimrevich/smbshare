JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Scala
*.scala
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.scala-lang.org
TRUE
//

0
11
// comment
/* multi-line /* nested */ comments */
object HelloWorld extends Application {
  type T <: BaseType
  val Number = 1234; val Str = "abcdef"
  val XML = <tag attribute="value">
              {compute("sum", 1+1)}
              <text>text <!--comment--></text>
              <scala>{compute("sum", 1+1)}</scala>
            </tag>
}

1
0
0

0
21
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment

/\*
FALSE
TRUE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

/**/
all
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
all
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
all
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
all
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
all
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
all
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
all
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Triple-quoted string

"""
FALSE
FALSE
str
0


-1
2
1
FALSE
FALSE
FALSE
0

TDQ
all
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
String
Closing quote optional so an unclosed string is still colored as a string
(")[^"\\\v]*+(?:\\(?:.|$)[^"\\\v]*+)*+(")?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

all
FALSE
"
2
0
TRUE
0
0
0
0
53
0
Character
Closing quote optional so an unclosed string is still colored as a string
(')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE
1
2

all
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\m0x[0-9A-F]++L?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[DF]?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++[DFL]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>abstract|case|catch|class|def|do|else|extends|false|final(?:ly)?|for(?:Some)?|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|requires|return|sealed|super|this|throw|trait|try|true|type|va[lr]|while|with|yield)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Empty XML tag
<tag.../>
(?<=[\s({])<[\i-[:]][^<>]{0,9999}+(?<=/)>
FALSE
FALSE
mu
0


3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening XML tag
<tag> for which </tag> is expected; include the line breaks that follow so that the remainder of the line is highlighted as markup rather than as code if the XML tag contains Scala code
(?<=[\s({])<([\i-[:]]\c*+)[^<>]{0,9999}+>\R*+
FALSE
FALSE
mu
0


3
11
3
FALSE
FALSE
FALSE
0

\1
xml
FALSE
</\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete opening XML tag
Excluded from bracket matching
(?<=[\s({])<([\i-[:]]\c*+)[^<>]{0,9999}+
FALSE
FALSE
mu
0


3
11
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing XML tag
</tag>
</(\i\c*+)\s*+>
FALSE
FALSE
mu
0


7
-1
3
FALSE
FALSE
FALSE

0
\1
xml
FALSE
<\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete closing XML tag
Excluded from bracket matching
</(\i\c*+)
FALSE
FALSE
mu
0


7
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Don't repeat the character class so =/* is properly highlighted as a comment after an equals sign
[-+*/=<>%&^|!~?:]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
16
Comment
1
comm
2



0
0

0
2
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
all
FALSE
/*
2
0
TRUE
0
0
0
0
0
0
Nested comment

/\*
FALSE
TRUE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

/**/
all
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Triple-quoted string
1
str
14



53
0

0
1
End of string

"""
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
TDQ
all
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
XML opening tag detail
0
mu
3
muhl


0
0

0
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the opening tag elements in the main scheme
<
FALSE
FALSE
mud
0


-1
4
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
7
TRUE
0
0
0
0
0
0
XML opening tag
3
mu
3
muhl


0
0

0
1
Opening tag
Guaranteed to be matched since this subscheme was toggled to after the opening angle was matched
\i\c*+
FALSE
FALSE
mu
0


-1
5
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
XML tag contents
3
mua
3
muhl


0
0
6
0
3
=

=\s*+
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Double-quoted value

"
FALSE
FALSE
muv
0


-1
9
3
FALSE
FALSE
FALSE
0

DQ
xml
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted value

'
FALSE
FALSE
muv
0


-1
10
3
FALSE
FALSE
FALSE
0

SQ
xml
FALSE
'
2
0
TRUE
0
0
0
0
0
0
End of XML tag
4
0
2
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
Empty closing angle

/>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
10
TRUE
0
0
0
0
0
0
XML closing tag detail
0
mu
3
muhl


0
0

0
1
Opening angle
Guaranteed to be matched since we are in a detail subscheme used by the closing tag elements in the main scheme
</
FALSE
FALSE
mud
0


-1
8
3
FALSE
FALSE
FALSE
0

<>

FALSE
>
0
8
TRUE
0
0
0
0
0
0
XML end of closing tag
3
mu
3
muhl


0
0

0
1
Closing angle

>
FALSE
FALSE
mud
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>

FALSE

0
9
TRUE
0
0
0
0
0
0
XML DQ Attribute
3
muv
3
muhl


0
0
6
0
1
Closing quote

"
FALSE
FALSE
muv
0


-1
5
3
FALSE
FALSE
FALSE

0
DQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
XML SQ Attribute
3
muv
3



0
0
6
0
1
Closing quote

'
FALSE
FALSE
muv
0


-1
5
3
FALSE
FALSE
FALSE

0
SQ
xml
FALSE

0
0
TRUE
0
0
0
0
0
0
XML Content
1

2
muhl
<!--
-->
0
0

0
13
Empty tag
<tag.../>
<\i[^<>]{0,9999}+(?<=/)>
FALSE
FALSE
mu
0


3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening Tag
<tag> for which </tag> is expected
<(\i\c*+)[^<>]{0,9999}+>
FALSE
FALSE
mu
0


3
11
3
FALSE
FALSE
FALSE
0

\1
xml
FALSE
</\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete opening tag
Excluded from bracket matching
<(\i\c*+)[^<>]{0,9999}+
FALSE
FALSE
mu
0


3
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing Tag
</tag>
</(\i\c*+)\s*+>
FALSE
FALSE
mu
0


7
-2
3
FALSE
FALSE
FALSE

0
\1
xml
FALSE
<\1>
2
0
TRUE
0
0
0
0
0
0
Incomplete closing tag
Excluded from bracket matching
</(\i\c*+)
FALSE
FALSE
mu
0


7
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

<!--
FALSE
FALSE
comm
0


-1
13
3
FALSE
FALSE
FALSE
0

<!-->
all
FALSE
-->
2
0
TRUE
0
0
0
0
0
0
CDATA

<!\[CDATA\[
FALSE
FALSE
str
0


-1
12
3
FALSE
FALSE
FALSE
0

[CDATA]
all
FALSE
]]>
2
0
TRUE
0
0
0
0
0
0
Entity

&(?:#\d++|#x[\dA-Z]++|\w++);
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Scala in XML

\G\s*+({)
FALSE
FALSE
brkts
0


-1
14
1
FALSE
FALSE
TRUE
1

{scala}
all
FALSE
}
2
0
TRUE
0
0
0
0
0
0


\(
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE
0

(xml)
content
FALSE
)
2
0
TRUE
0
0
0
0
0
0


\)
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE

0
(xml)
content
FALSE
(
2
0
TRUE
0
0
0
0
0
0


\[
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE
0

[xml]
content
FALSE
]
2
0
TRUE
0
0
0
0
0
0


]
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE

0
[xml]
content
FALSE
[
2
0
TRUE
0
0
0
0
0
0
CDATA
1
str
3
muhl
<!--
-->
0
0

0
1
Closing tag

]]>
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
[CDATA]
all
FALSE

0
0
TRUE
0
0
0
0
0
0
XML Comment
1
comm
2
muhl
<!--
-->
0
0

0
1
Closing -->

-->
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
<!-->
all
FALSE

0
0
TRUE
0
0
0
0
0
0
Scala in XML
1

3
codehl


0
0

0
17
Closing }

(})\r?\n?
FALSE
FALSE
brkts
0


-1
-2
3
FALSE
FALSE
FALSE

1
{scala}
all
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Nested {

{
FALSE
FALSE
brkts
0


-1
14
3
FALSE
FALSE
FALSE
0

{scala}
all
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
all
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
all
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
all
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
all
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment

/\*
FALSE
TRUE
comm
0


-1
15
3
FALSE
FALSE
FALSE
0

/**/
all
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Triple-quoted string

"""
FALSE
FALSE
str
0


-1
16
1
FALSE
FALSE
FALSE
0

TDQ
all
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
String
Closing quote optional so an unclosed string is still colored as a string
(")[^"\\\v]*+(?:\\(?:.|$)[^"\\\v]*+)*+(")?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

all
FALSE
"
2
0
TRUE
0
0
0
0
53
0
Character
Closing quote optional so an unclosed string is still colored as a string
(')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE
1
2

all
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\m0x[0-9A-F]++L?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[DF]?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++[DFL]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>abstract|case|catch|class|def|do|else|extends|false|final(?:ly)?|for(?:Some)?|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|requires|return|sealed|super|this|throw|trait|try|true|type|va[lr]|while|with|yield)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Next tag

(?=</?[a-z_])
TRUE
FALSE
mu
0


-1
-2
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/=<>%&^|!~?]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Scala comment in XML
1
comm
2
codehl


0
0

0
2
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
all
FALSE

0
0
TRUE
0
0
0
0
0
0
Nested comment

/\*
FALSE
TRUE
comm
0


-1
15
3
FALSE
FALSE
FALSE
0

/**/
all
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Triple-quoted string in XML
1
str
14
codehl


53
0

0
1
End of string

"""
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
TDQ
all
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
