JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Groovy
*.groovy
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://groovy.codehaus.org/
FALSE
//

0
7
#!/usr/bin/env groovy
/** EditPad's Groovy Scheme */
static void main(String[] args) {
  assert 1 + 0x1 + 0b1 == 3.0
  def S = "$groovy strings with ${ /* interpolated */ code++ } :-)"
  def RE = /regex \w $groovy/
}

1
0
0
1
0
3
Shebang

\A#!.*+
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
0
12
Groovy
4
0
20
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Documentation comment

/\*\*(?!/)
FALSE
TRUE
doccomm
0


-1
2
3
FALSE
FALSE
FALSE
0

/****/
code
FALSE
*/
0
0
TRUE
0
0
0
0
0
0
Multi-line comment

/\*
FALSE
TRUE
comm
0


-1
3
3
FALSE
FALSE
FALSE
0

/**/
code
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Comma

,
FALSE
FALSE
brkt
0


-1
-1
1
FALSE
FALSE
FALSE



code
FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Triple-double-quoted string

"""
FALSE
TRUE
str
0


-1
4
2
FALSE
FALSE
FALSE
0

TDQ
code
FALSE
"""
2
0
TRUE
0
0
0
0
0
0
Triple-single-quoted string

'''
FALSE
TRUE
str
0


-1
6
2
FALSE
FALSE
FALSE
0

TSQ
code
FALSE
'''
2
0
TRUE
0
0
0
0
0
0
Double-quoted string
Must come after triple-double-quoted string in the scheme
"
FALSE
FALSE
str
0


-1
7
2
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
Single-quoted string
Must come after the triple-single-quoted string in the scheme.
'
FALSE
FALSE
str
0


-1
9
3
FALSE
FALSE
FALSE
0

SQ
code
FALSE
'
0
0
TRUE
0
0
0
0
0
0
Slashy string
We require an operator, opening parenthesis, or comma to be present, so there's no confusion between // and the division operator
(?<=[=~+(,:]\s*)/
FALSE
FALSE
patt
0


-1
10
3
FALSE
FALSE
FALSE
0

//
code
FALSE
/
0
0
TRUE
0
0
0
0
0
0
Dollar slashy string

\$/
FALSE
FALSE
patt
0


-1
11
3
FALSE
FALSE
FALSE
0

$//$
code
FALSE
/$
0
0
TRUE
0
0
0
0
0
0
Hexadecimal number
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m0x[0-9A-F_]*+[0-9A-F][GLIDF]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Binary number
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m0b[01_]++[GLIDF]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[DF]?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer
We allow underscores at the end so the number doesn't flicker while it is being typed in
\m[0-9_]++[GLIDF]?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>abstract|any|as(?:sert)|boolean|break|byte|case|catch|char|class|const|continue|def(?:ault)?|do(?:uble)?|else|enum|extends|final(?:ly)?|float|for|goto|if|implements|import|in(?:t(?:erface)?|stanceof)?|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throws?|trait|transient|try|void|volatile|while|with|true|false|null)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Do not repeat the character class, to make sure def pattern = ~/foo/ is highlighted as a regex
[-+*/=<>%&^|!~?]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Documentation comment
1
doccomm
2



0
0

0
1
Closing */

\*/
FALSE
FALSE
doccomm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/****/
code
FALSE
/**
0
0
TRUE
0
0
0
0
0
0
Comment
1
comm
2



0
0

0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
code
FALSE
/*
0
0
TRUE
0
0
0
0
0
0
Triple-double-quoted string
1
str
14



0
0

0
4
Closing quote

"""
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
TDQ
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\(?:u[0-9A-Fa-f]{4}|.)
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[\w.]++
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Code

\$\{
FALSE
FALSE
brkts
0


-1
5
3
FALSE
FALSE
FALSE
0

TDQ{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Triple-double-quoted code
1

3
var


0
0
1
1
Opening brace toggles to the present subscheme and closing brace toggles back.  This allows us to correctly handle nested braces inside interpolated code.
2
Opening brace

\{
FALSE
FALSE
brkts
0


-1
5
3
FALSE
FALSE
FALSE
0

TDQ{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-2
3
FALSE
FALSE
FALSE

0
TDQ{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Triple-single-quoted string
1
str
14



0
0

0
2
Closing quote

'''
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
TSQ
code
FALSE
'''
0
0
TRUE
0
0
0
0
0
0
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\(?:u[0-9A-Fa-f]{4}|.)
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Double-quoted string
2
str
6



0
0

0
4
Closing quote

"
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\(?:u[0-9A-Fa-f]{4}|.)
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[\w.]++
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Code

\$\{
FALSE
FALSE
brkts
0


-1
8
3
FALSE
FALSE
FALSE
0

DQ{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Double-quoted code
2

3
var


0
0
1
1
Opening brace toggles to the present subscheme and closing brace toggles back.  This allows us to correctly handle nested braces inside interpolated code.
2
Opening brace

\{
FALSE
FALSE
brkts
0


-1
8
3
FALSE
FALSE
FALSE
0

DQ{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Single-quoted string
2
str
6



0
0

0
2
Closing quote

'
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
SQ
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\(?:u[0-9A-Fa-f]{4}|.)
FALSE
FALSE
ch
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Slashy string
1
patt
15



0
0

0
4
Closing slash

(/)\w*
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

1
//
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Escaped slash

\\/
FALSE
FALSE
patt
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[\w.]++
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Code

\$\{
FALSE
FALSE
brkts
0


-1
12
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Dollar slashy string
1
patt
15



0
0

0
4
Closing /$

/\$
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

0
$//$
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Dollar escape

\$[$/]
FALSE
FALSE
patt
0


-1
-1
7
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[\w.]++
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Code

\$\{
FALSE
FALSE
brkts
0


-1
12
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Slashed code
1

3
patt


0
0
1
1
Opening brace toggles to the present subscheme and closing brace toggles back.  This allows us to correctly handle nested braces inside interpolated code.
2
Opening brace

\{
FALSE
FALSE
brkts
0


-1
12
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-2
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
