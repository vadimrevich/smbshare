JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Tcl
*.tcl
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.tcl.tk
TRUE
#

0
2
#!/usr/bin/tcl
puts [regsub -all {regex} $subject "replace $variable"]

0
0
0

0
16
Comment

#
FALSE
FALSE
comm
0


-1
1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Substitution

\$(?:\w++|{[^}]++}?+)
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Switch

-(?:[a-z_][a-z0-9_]*|-)
TRUE
FALSE
const
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Quoted word

"
FALSE
FALSE
str
0


-1
2
3
FALSE
FALSE
FALSE
0

"
code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Command start

\[
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Command end

]
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Line continuation

\\\r?\n
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
FALSE

0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?[FL]?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++\M
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal

\m0x[a-f0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Commands

38
\m(?>
after(?>[ \t]++(?>cancel|idle)\M)?
|append
|array(?>[ \t]++(?>anymore|donesearch|exists|get|names|nextelement|set|size|startsearch|statistics|unset)\M)?
|auto_execok|auto_import|auto_load|auto_mkindex(?:_old)?|auto_qualify|auto_reset|parray|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore
|bgerror
|binary(?>[ \t]++(?>format|scan)\M)?
|break|catch|cd
|chan(?>[ \t]++(?>blocked|close|configure|copy|create|eof|event|flush|gets|names|pending|postevent|puts|read|seek|tell|truncate)\M)?
|clock(?>[ \t]++(?>add|clicks|format|microseconds|milliseconds|scan|seconds)\M)?
|close|concat|continue
|dde(?>[ \t]++(?>servername|execute|poke|request|services|eval)\M)?
|dict(?>[ \t]++(?>create|exists|filter|for|get|incr|info|keys|lappend|merge|remove|replace|set|size|unset|update|values|with)\M)?
|encoding(?>[ \t]++(?>convert(?>from|to)|dirs|names|system)\M)?
|eof|error|eval|exec|exit|expr|fblocked|fconfigure|fcopy
|file(?>event|name|[ \t]++(?>atime|attributes|channels|copy|delete|dirname|executable|exists|extension|isdirectory|isfile|join|link|lstat|mkdir|mtime|nativename|normalize|owned|pathtype|readable|readlink|rename|rootname|separator|size|split|stat|tail|type|volumes|writable)\M)?
|flush|for(?:each)?|format|gets|glob(?:al)?
|history(?>[ \t]++(?>add|change|clear|event|info|keep|nextid|redo)\M)?
|if|then|else(?:if)?
|incr
|info(?>[ \t]++(?>args|body|cmdcount|commands|complete|default|exists|frame|functions|globals|hostname|level|library|loaded|locals|nameofexecutable|patchlevel|procs|script|sharedlibextension|tclversion|vars)\M)?
|interp(?>[ \t]++(?>alias(?:es)?|bgerror|create|debug|delete|eval|exists|expose|hide|hidden|invokehidden|limit|issafe|marktrusted|recursionlimit|share|slaves|target|transfer)\M)?
|join|lappend|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort
|memory(?>[ \t]++(?>active|break_on_malloc|info|objs|onexit|tag|trace_on_at_matlloc|(?>init|trace|validate)(?>[ \t]++(?>on|off)\M)?)\M)?
|namespace(?>[ \t]++(?>children|code|current|delete|ensemble(?>[ \t]++(?>create|configure|exists)\M)?|eval|exists|export|forget|import|inscope|origin|parent|path|qualifiers|tail|upvar|unknown|which)\M)?
|open
|package(?>[ \t]++(?>forget|ifneeded|names|present|provide|require|unknown|vcompare|versions|vsatisfies|prefer(?>[ \t]++(?>latest|stable)\M)?)\M)?
|pid|pkg_mkIndex|proc|puts|pwd|read|regexp
|registry(?>[ \t]++(?>broadcast|delete|get|keys|set|type|values)\M)?
|regsub|rename|resource
|return(?>[ \t]++(?>ok|error|return|break|continue)\M)?
|scan|seek|set|socket|source|split
|string(?>[ \t]++(?>bytelength|compare|equal|first|index
                  |is(?>[ \t]++(?>alnum|alpha|ascii|boolean|control|digit|double|false|graph|integer|list|lower|print|punct|space|tree|upper|wideinteger|wordchar|xdigit)\M)?
                  |last|length|map|match|range|repeat|replace|reverse|tolower|totitle|toupper|trim(?>left|right)?|wordend|wordstart)\M)?
|subst|switch|tell|time
|trace(?>[ \t]++(?>variable|vdelete|vinfo|(?:add|remove|info)(?>[ \t]++(?>command|execution|variable)\M)?)\M)?
|unknown|unload|unset|update|uplevel|upvar|variable|vwait|while)\M
FALSE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
2
Comment
1
comm
2



0
0

0
2
End of line

$
FALSE
FALSE

0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Line continuation
Line continuation works everywhere in Tcl, even in comments
\\\r?\n
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Quoted word
1
str
3



0
0

0
3
Closing quote

"
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
"
code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
Escape

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Substitution

\$(?:\w++|{[^}"]++}?+)
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
