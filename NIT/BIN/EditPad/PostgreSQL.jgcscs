JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
PostgreSQL
*.sql
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.postgresql.org
FALSE
-- 

1
Complete PostgreSQL coloring scheme.  Colors multi-line comments, and allows strings to span across multiple lines, like MySQL does.  Slow for very large SQL files, since it must parse the whole file from the start.
2
-- PostgreSQL
select count(*) from sometable where somefield = 'test';

1
0
0

0
14
BEGIN

\m(?<!@)BEGIN\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

BEGIN-END
sql
FALSE
END
1
2
FALSE
0
0
0
0
0
1
END

\m(?<!@)END\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
BEGIN-END
sql
FALSE
BEGIN
1
3
FALSE
0
0
0
0
0
0
Keyword

\m(?>ABORT|ABSOLUTE|ACCESS|ACTION|ADD|ADMIN|AFTER|AGGREGATE|ALL|ALSO|ALTER|ANALYSE|ANALYZE|AND|ANY|ARRAY|ASC?|ASSERTION|ASSIGNMENT|ASYMMETRIC|AT|AUTHORIZATION|BACKWARD|BEFORE|BETWEEN|BIGINT|BINARY|BIT|BOOLEAN|BOTH|BY|CACHE|CALLED|CASCADED?|CASE|CAST|CHAIN|CHAR(?:ACTER(?:ISTICS)?)?|CHECK(?:POINT)?|CLASS|CLOSE|CLUSTER|COALESCE|COLLATE|COLUMN|COMMENT|COMMIT(?:TED)|CONCURRENTLY|CONNECTION|CONSTRAINTS?|CONVERSION|CONVERT|COPY|CREATE(?:DB|ROLE|USER)?|CROSS|CSV|CURRENT_DATE|CURRENT_ROLE|CURRENT_TIME(?:STAMP)?|CURRENT_USER|CURSOR|CYCLE|DATABASE|DAY|DEALLOCATE|DEC(?:IMAL|LARE)?|DEFAULTS?|DEFERRABLE|DEFERRED|DEFINER|DELETE|DELIMITERS?|DESC|DISABLE|DISTINCT|DO(?:MAIN|UBLE)?|DROP|EACH|ELSE|ENABLE|ENCODING|ENCRYPTED|ESCAPE|EXCEPT|EXCLUDING|EXCLUSIVE|EXECUTE|EXISTS|EXPLAIN|EXTERNAL|EXTRACT|FALSE|FETCH|FIRST|FLOAT|FOR(?:CE|EIGN|WARD)?|FREEZE|FROM|FULL|FUNCTION|GLOBAL|GRANT(?:ED)?|GREATEST|GROUP|HANDLER|HAVING|HEADER|HOLD|HOUR|IF|ILIKE|IMMEDIATE|IMMUTABLE|IMPLICIT|IN(?:CLUDING|CREMENT|DEX(?:ES)?|HERITS?|ITIALLY|NNER|OUT|PUT|SENSITIVE|SERT|STEAD|T(?:EGER|ERSECT|ERVAL|O)?|VOKER)?|IS(?:NULL|OLATION)?|JOIN|KEY|LANCOMPILER|LANGUAGE|LARGE|LAST|LEADING|LEAST|LEFT|LEVEL|LIKE|LIMIT|LISTEN|LOAD|LOCAL(?:TIME(?:STAMP)?)?|LOCATION|LOCK|LOGIN|MATCH|MAXVALUE|MINUTE|MINVALUE|MODE|MONTH|MOVE|NAMES|NATIONAL|NATURAL|NCHAR|NEW|NEXT|NO(?:CREATEDB|CREATEROLE|CREATEUSER|INHERIT|LOGIN|NE|SUPERUSER|T(?:HING|IFY|NULL)?|WAIT)?|NULL(?:IF)?|NUMERIC|OBJECT|OF(?:F(?:SET)?)?|OIDS|OLD|ON(?:LY)?|OPERATOR|OPTION|OR(?:DER)?|OUT(?:ER)?|OVERLAPS|OVERLAY|OWNED|OWNER|PARTIAL|PASSWORD|PLACING|POSITION|PRECISION|PREPARED?|PRESERVE|PRIMARY|PRIOR|PRIVILEGES|PROCEDURAL|PROCEDURE|QUOTE|READ|REAL|REASSIGN|RECHECK|REFERENCES|REGEXP_REPLACE|REGEXP_SPLIT_TO_(?:ARRAY|TABLE)|REINDEX|RELATIVE|RELEASE|RENAME|REPEATABLE|REPLACE|RESET|RESTART|RESTRICT|RETURNING|RETURNS|REVOKE|RIGHT|ROLE|ROLLBACK|ROWS?|RULE|SAVEPOINT|SCHEMA|SCROLL|SECOND|SECURITY|SELECT|SEQUENCE|SERIALIZABLE|SESSION(?:_USER)?|SET(?:OF)?|SHARE|SHOW|SIMILAR|SIMPLE|SMALLINT|SOME|STABLE|START|STATEMENT|STATISTICS|STDIN|STDOUT|STORAGE|STRICT|SUBSTRING|SUPERUSER|SYMMETRIC|SYSID|SYSTEM|TABLE(?:SPACE)?|TEMP(?:LATE|ORARY)?|THEN|TIME(?:STAMP)?|TO|TRAILING|TRANSACTION|TREAT|TRIGGER|TRIM|TRUE|TRUNCATE|TRUSTED|TYPE|UNCOMMITTED|UNENCRYPTED|UNION|UNIQUE|UNKNOWN|UNLISTEN|UNTIL|UPDATE|USER|USING|VACUUM|VALID(?:ATOR)?|VALUES|VARCHAR|VARYING|VERBOSE|VIEW|VOLATILE|WHEN|WHERE|WITH(?:OUT)?|WORK|WRITE|YEAR|ZONE)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
1
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-line comment

--.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
/\*
FALSE
FALSE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

/**/
sql
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Single-quoted string

'
FALSE
FALSE
str
0


-1
2
3
FALSE
FALSE
FALSE
0

SQ
sql
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Dollar-quoted string

(\$(?:[\p{L}_]\w*)?\$).*?(\1)
TRUE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

sql
FALSE

0
0
TRUE
0
0
0
0
0
0
Bit string

(b')[01]+(')
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

sql
FALSE

0
0
TRUE
0
0
0
0
0
0
Hex string

(x')[0-9a-f]+(')
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

sql
FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
sql
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
sql
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Operator
Don't repeat the character class so =/* is properly highlighted as a comment after an equals sign
[-+*/<>=~!@#%^&|`?]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
2
Multi-line comment
1
comm
2



0
0

0
2
Closing */

\*/
FALSE
FALSE
comm
0


-1
0
3
FALSE
FALSE
FALSE

0
/**/
sql
FALSE

0
0
TRUE
0
0
0
0
0
0
Nested comment
PostgreSQL allows comments to be nested
/\*
FALSE
FALSE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

/**/
sql
FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string
1
str
2



0
0

0
3
Escaped character
This element makes sure escaped characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Doubled single quote
Quote characters can be doubled to include a single quote character in the string
''
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing '

'
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
SQ
sql
FALSE
'
0
0
TRUE
0
0
0
0
0
0
