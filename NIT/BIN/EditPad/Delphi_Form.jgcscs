JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Delphi Forms
*.dfm;*.fmx;*.xfm;*.nfm;*.lfm
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.embarcadero.com/products/delphi
FALSE
//

1
Delphi form files.
26
object Form1: TForm1
  Caption =
    'Sample Delphi form ' +
    'to illustrate syntax coloring.'
  ClientHeight = 231
  ClientWidth = 244
  Color = clBtnFace
  Font.Charset = DEFAULT_CHARSET
  Font.Color = clWindowText
  Font.Height = -11
  Font.Name = 'Tahoma'
  Font.Style = []
  object ListView1: TListView
    Align = alClient
    Columns = <
      item
        Caption = 'One'
      end
      item
        Caption = 'Two'
      end>
    Items.ItemData = {
      03220000000100000000000000FFFFFFFFFFFFFFFF00000000FFFFFFFF000000
      00044900740065006D00}
  end
end

3
0
0

0
17
Begin
Reserved words that pair up with "end"
\m(?>object|inline|inherited|item)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

beginend
code
FALSE
end
1
1
FALSE
1
0
3
1
0
0
End

\mend\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
beginend
code
FALSE
begin
0
1
FALSE
1
2
1
0
0
0
Float

\m[0-9]++(?:\.[0-9]++(?:E[+-]?[0-9]++)?+|E[+-]?[0-9]++)\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\$[A-F0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE
1
2
{}

FALSE
}
0
0
TRUE
0
0
0
0
0
0
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
comm
0


-1
-1
3
FALSE
FALSE
FALSE
0

(**)

FALSE
*)
0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Opening angle

<
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

<>
code
FALSE
>
0
1
TRUE
0
0
1
1
0
0
Closing angle

>
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
<>
code
FALSE
<
0
1
TRUE
0
0
1
2
0
0
Operator
Since // starts a single line comment, we must not match more than one operator character at the same time (i.e. no quantifier in the regex)
[-+*/:@^=]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
String
Closing ' optional so unclosed strings are colored until the end of the line
(')[^'\v]*+('?)
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE

0
0
TRUE
0
0
0
0
0
0
Character

#(?:\$[A-F0-9]++|[0-9]++)\M
TRUE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
0
