JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Ruby
*.rb
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.ruby.org
TRUE
#

0
6
# EditPad's Ruby scheme
def method_name (var1, var2)
  $globalstring = "Hello World"
  @instancenumber = (1 + 2) * 3.0
  localregex = /regex/
end

1
0
0

0
21
Comment

#.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Documentation Comment

^=begin
FALSE
FALSE
doccomm
0


-1
5
3
FALSE
TRUE
FALSE
0

doc
code
FALSE
=end
0
0
TRUE
0
0
0
0
0
0
Regex
A / at the start of the line starts a regular expression
^[ \t]*(/)
FALSE
FALSE
patt
0


-1
9
3
FALSE
FALSE
FALSE
1

regex
code
FALSE
/
0
0
TRUE
0
0
0
0
0
0
Float

(?<!\$)(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
FALSE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Number
Integer, hexadecimal and binary
\m(?<!\$)(?:[0-9]++|0x[0-9a-fA-F]++|0b[01]++)\M
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved Words

\m(?>__(?>FILE|LINE|ENCODING)__|BEGIN|END|alias|and|begin|break|case|class|def(?:ined)?|do|else|elsif|end|ensure|false|for|if|in|module|next|nil|not|or|redo|rescue|retry|return|self|super|then|true|undef|unless|until|when|while|yield)\M
FALSE
FALSE
keyword
0


-1
8
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/%=!<>?:&|^~]++|\.{2,}
FALSE
FALSE
op
0


-1
8
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
8
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
8
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
0
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
8
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
8
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
8
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
8
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Scoped name

[$@]++[a-z_][a-z0-9_]*+
TRUE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string

'
FALSE
FALSE
str
0


-1
6
3
FALSE
FALSE
FALSE
0

SQ
code
FALSE
'
0
0
TRUE
0
0
0
0
0
0
Double-quoted string

"
FALSE
FALSE
str
0


-1
7
3
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
Generalized delimited input
Nested ( and ) delimiters
%[qQwrx]?+\(
FALSE
FALSE
str
0


-1
1
3
FALSE
FALSE
FALSE
0

GDI ()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Generalized delimited input
Nested [ and ] delimiters
%[qQwrx]?+\[
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE
0

GDI []
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Generalized delimited input
Nested { and } delimiters
%[qQwrx]?+{
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE
0

GDI {}
code
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Generalized delimited input
Nested < and > delimiters
%[qQwrx]?+<
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE
0

GDI <>
code
FALSE
>
0
0
TRUE
0
0
0
0
0
0
Generalized delimited input

(%[qQwrx]?+([^\v[(<{]))(?:.*?(?<!\\)(\2)|.*+)
FALSE
TRUE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
3

code
FALSE
\2
0
0
TRUE
0
0
0
0
0
0
0
9
GDI ()
1
str
14



0
0

0
3
Opening (

\(
FALSE
FALSE
str
0


-1
1
3
FALSE
FALSE
FALSE
0

GDI ()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing )

\)
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
GDI ()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
GDI []
1
str
14



0
0

0
3
Opening [

\[
FALSE
FALSE
str
0


-1
2
3
FALSE
FALSE
FALSE
0

GDI []
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing ]

\]
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
GDI []
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
GDI {}
1
str
14



0
0

0
3
Opening [

\{
FALSE
FALSE
str
0


-1
3
3
FALSE
FALSE
FALSE
0

GDI {}
code
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Closing }

\}
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
GDI {}
code
FALSE
{
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
GDI <>
1
str
14



0
0

0
3
Opening <

<
FALSE
FALSE
str
0


-1
4
3
FALSE
FALSE
FALSE
0

GDI <>
code
FALSE
>
0
0
TRUE
0
0
0
0
0
0
Closing >

>
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
GDI <>
code
FALSE
<
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Documentation Comment
1
comm
2



0
0

0
2
Closing delimiter

^=end
FALSE
FALSE
doccomm
0


-1
0
3
FALSE
TRUE
FALSE

0
doc
code
FALSE
=begin
0
0
TRUE
0
0
0
0
0
0
Heading

^=.++
FALSE
FALSE
doccomm
0


-1
-1
2
FALSE
TRUE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string
1
str
14



0
0

0
2
Closing '

'
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
SQ
code
FALSE
'
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Double-quoted string
1
str
14



0
0

0
3
Closing "

"
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
DQ
code
FALSE
"
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolation

#(\$\w+|{[^}]+}?)
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Regex Start
1

3



0
0

0
2
Regex
A / after a reserved word, bracket or operator starts a regular expression.  The next unescaped / terminates the regex.
\s*(/)
FALSE
FALSE
patt
0


-1
9
3
FALSE
FALSE
FALSE
1

regex
code
FALSE
/
0
0
TRUE
0
0
0
0
0
0
No regex

\G
FALSE
FALSE

0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Regex Content
1
patt
15



0
0

0
3
Closing /

/
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
regex
code
FALSE
/
0
0
TRUE
0
0
0
0
0
0
Escaped character

\\.
FALSE
TRUE
patt
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolation

#(\$\w+|{[^}]+}?)
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
