JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Visual Basic.NET
*.vb;*.bas
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://msdn.microsoft.com/vbasic/
TRUE
'

0
7
#Region "Example"
Rem EditPad's VB.NET scheme
Public Shared Sub Test()
  ANumber = 1234
  AString = "abcdef"
  ADate = #2005/05/19#
End Sub

1
0
0

0
35
String
The closing " is optional, so unterminated strings are colored as well
(")[^"\v]*+("c?)?
TRUE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

vb
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Preprocessor statement
Can be terminated by a comment
^[ \t]*+#.*?(?=$|'|Rem)
TRUE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Date
Closing # is optional, so unterminated dates are colored as well
(#)[^#\v]*+(#)?
FALSE
FALSE
date
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

vb
FALSE
#
2
0
TRUE
0
0
0
0
0
0
Documentation Comment

'''.*+
FALSE
FALSE
doccomm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

'.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

\mRem\M.*+
TRUE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Block
Keywords that begin a block terminated with End Keyword; If is omitted because End If is optional; Select is omitted because it may be written as Select Case
\m(?>AddHandler|Class|Enum|Function|Get|Interface|Module|Namespace|Operator|Property|RaiseEvent|RemoveHandler|Set|Structure|Sub|SyncLock|Try|While|With)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

\0
vb
FALSE
End \0
1
1
FALSE
1
0
3
1
0
0
End Block

\mEnd\h++((?>AddHandler|Class|Enum|Function|Get|Interface|Module|Namespace|Operator|Property|RaiseEvent|RemoveHandler|Set|Structure|Sub|SyncLock|Try|While|With))\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
\1
vb
FALSE
\1
0
1
FALSE
1
2
1
0
0
0
Single line If

\mIf\M(?=.*?\hThen\h+\S)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
0
0
0
0
3
If

\mIf\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

If
vb
FALSE
End If
1
1
FALSE
1
0
3
1
0
3
Else

\m(?:Case\h++)?+Else\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
1
1
0
3
ElseIf

\mElseIf\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End If

\mEnd\h++If\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
If
vb
FALSE
If
0
1
FALSE
1
2
1
0
0
3
Select Case

\mSelect(?:\h++Case)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Select
vb
FALSE
End Select
1
1
FALSE
1
0
3
1
0
3
First Case
First Case should not be outdented
\mCase\M(?<=^\h*+Select\h++Case.*?\R\h*+Case)
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
0
2
3
1
0
3
Case

\mCase\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
1
FALSE
1
2
3
1
0
3
End Select

\mEnd\h++Select\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Select
vb
FALSE
Select Case
0
1
FALSE
1
4
1
0
0
3
Do

\mDo(?:\h++(?>While|Until))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

Loop
vb
FALSE
Loop
1
1
FALSE
1
0
3
1
0
3
Loop

\mLoop(?:\h++(?>While|Until))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
Loop
vb
FALSE
Do
0
1
FALSE
1
2
0
0
0
3
For

\mFor(?:\h++Each)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

For
vb
FALSE
Next
1
1
FALSE
1
0
0
0
0
3
Next

\mNext\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
For
vb
FALSE
For
0
1
FALSE
1
2
1
0
0
3
Skip/Take While
Match Skip/Take While as a whole so that While is not seen as the start of a block
\m(?>Skip|Take)\h++While\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE
While
0
0
TRUE
1
2
1
0
0
3
Resume
Match Resume Next as a whole so that Next is not seen as the end of a For loop
\mResume(?:\h++Next)?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE
While
0
0
TRUE
1
2
1
0
0
3
Exit
We need to match Exit statements as a whole to make sure the second keyword isn't matched as the start of a block
\mExit(?>\h++(?:Do|For|Function|Property|Select|Sub|Try|While))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
1
2
1
1
0
3
Continue
We need to match Continue statements as a whole to make sure the second keyword isn't matched as the start of a block
\mContinue(?>\h++(?:Do|For|While))?\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
1
2
1
1
0
3
Reserved word
Reserved words not already matched by any of the preceding elements
22
\m(?>
AddressOf|Alias|And(?:Also)?|As|
Boolean|ByRef|Byte|ByVal|
Call|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Constraint|CLng|CObj|Const|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|
Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Double|
Each|End(?:If)?|Erase|Error|
False|Finally|Friend|
GetType|GetXMLNamespace|Global|GoSub|GoTo|
Handles|
Implements|Imports|In(?:herits|teger)?|Is(?:Not)?|
Let|Lib|Like|Long|
Me|Mod|MustInherit|MustOverride|MyBase|MyClass|
Narrowing|New|Not(?:hing|Inheritable|Overridable)?|
Object|O[fn]|Option(?:al)|Or(?:Else)|Out|Overloads|Overridable|Overrides|
ParamArray|Partial|Private|Protected|Public|
ReadOnly|ReDim|Return|
SByte|Shadows|Shared|Short|Single|Static|Step|Stop|String|
Then|Throw|To|True|TryCast|TypeOf|
UInteger|ULong|UShort|Using|
Variant|Wend|When|Widening|WithEvents|WriteOnly|
Xor
)\M
TRUE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
3
Integer

\m[0-9]++[%&SIL]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Real

\m(?:[0-9]++)?\.?[0-9]+(?:e[+-]?[0-9]+)?[@!#FRD]?
FALSE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hex number

&H[0-9A-F]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Octal number

&O[0-7]++[SIL%&]?
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/\\^&<=>]++
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
vb
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
vb
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
vb
FALSE
}
0
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
vb
FALSE
{
0
0
TRUE
0
0
0
0
0
0
0
0
