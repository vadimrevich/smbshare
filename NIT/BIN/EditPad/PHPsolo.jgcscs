JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
PHP without HTML
*.php;*.php3
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.php.net
FALSE
#

1
Stand-alone PHP code, without HTML.
9
// PHP without HTML
function test($param) {
  $number = 1234;
  $string = "This is a $test";
  $boolean = TRUE;
  $heredoc = <<<HEREDOC
I'm here!
HEREDOC;
}

1
0
0
1	2
1
The subschemes in the PHPsolo scheme are a subset of those in the PHP scheme.  The only change is the subscheme highlight color is set to "plain text" (essentially disabling the highlight) insead of "code highlight".  Keeping the "PHP toggle" and "PHP common" include subschemes even though they are used only by the main coloring scheme makes it easier to keep the PHPsolo and PHP schemes in sync.
1
Single-line comment

(//|#).*
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
6
(
)
TRUE
3
[
]
TRUE
3
{
}
TRUE
3
'
'
FALSE
2
"
"
FALSE
5
/*
*/
FALSE
2
7
PHP toggle
4
0
11
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
php
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
php
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Mutli-line comment

/\*
FALSE
TRUE
comm
0


-1
4
3
FALSE
FALSE
FALSE
0

/**/
php
FALSE
*/
0
0
TRUE
0
0
0
0
0
0
Single-quoted string

'
FALSE
FALSE
str
0


-1
5
3
FALSE
FALSE
FALSE
0

SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Double-quoted string

"
FALSE
FALSE
str
0


-1
3
3
FALSE
FALSE
FALSE
0

DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Execution operator

`
FALSE
FALSE
preproc
0


-1
7
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Heredoc
Properly finished heredoc.  A heredoc is started by an identifier preceded by <<< and terminated by the same identifier all by itself on a line without indentation.
(<<<([A-Za-z0-9_]++))\R.*?^(\2);?$
FALSE
TRUE
str
0


6
-1
1
FALSE
FALSE
FALSE
1
3

php
FALSE

0
0
TRUE
0
0
1
0
0
0
Open heredoc
Heredoc with missing terminator; we capture the line break after the identifier so that we can generate the closing line with the same line break style
(<<<([A-Za-z0-9_]++))(\R).*+
FALSE
TRUE
str
0


6
-1
1
FALSE
FALSE
FALSE
1


php
FALSE
\3\2;\3
1
0
TRUE
0
0
0
0
0
0
Nowdoc
Properly finished nowdoc.  A now is started by an identifier between single quotes and preceded by <<< and terminated by the same identifier all by itself on a line without indentation.
(<<<'([A-Za-z0-9_]++)')\R.*?^(\2);?$
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1
3

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Open nowdoc
Nowdoc with missing terminator; we capture the line break after the identifier so that we can generate the closing line with the same line break style
(<<<'([A-Za-z0-9_]++)')(\R).*+
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1


php
FALSE
\3\2;\3
1
0
TRUE
0
0
0
0
0
0
Upcoming nowdoc or heredoc
Nowdoc or heredoc with missing indentifier; prevents the ' from being seen as the start of the string; that would cause automatic bracket matching to generate a ' and then not generate the closing line after typing the newdoc identifier
<<<'?
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
0


php
FALSE

0
0
TRUE
0
0
0
0
0
0
PHP common
4
0
12
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
php
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
php
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
php
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
php
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Reserved words

21
\m(?>
# Reserved words
abstract|and|array|as|break|
callable|case|catch|class|clone|const|continue|
declare|default|die|do|
echo|else(?:if)?|empty|enddeclare|endfor(?:each)?|endif|endswitch|endwhile|eval|exit|extends|
final(?:ly)?|for(?:each)?|function|
global|goto|
if|implements|include(?:_once)?|instanceof|insteadof|interface|isset|
list|namespace|new|or|
print|private|protected|public|
require(?:_once)?|return|
static|switch|
throw|trait|try|
unset|use|
var|while|xor|yield|
# Other reserved words (excluding constant values)
int|float|bool|string|void|iterable|object|
# Soft reserved words
resource|mixed|numeric
)\M
TRUE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m(?>[1-9][0-9]*+|0[0-7]*+)\M
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal

\m0x[a-f0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Binary

\m0b[01]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:->[A-Za-z_][A-Za-z0-9_]*+)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Constant values

\m(?>TRUE|FALSE|NULL|__(?>LINE|FILE|DIR|FUNCTION|CLASS|TRAIT|METHOD|NAMESPACE)__)\M
TRUE
FALSE
constv
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Operator
(don't repeat the character class, since that will disable heredoc code like $x=<<<x;
[-.=+*/<>|&!~?:%^@]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated string
1
str
14

//

0
0

0
4
Escaped character
Ensures escaped $ and " are skipped and allows character escapes to be highlighted differently
\\(?:[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u\{[0-9A-Fa-f]+\}|.)
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing "

"
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ
php
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
PHP comment
1
comm
2

/*
*/
0
0

0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
/**/
php
FALSE
/*
2
0
TRUE
0
0
0
0
0
0
Single-quoted string
1
str
14

//

0
0

0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)' would fail to match the closing " in 'string\\'
\\.
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing '

'
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
SQ
php
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Here document
0
str
14

//

0
0

0
3
Escaped character

\\(?:[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u\{[0-9A-Fa-f]+\}|.)
FALSE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
Execution operator
1
preproc
3

//

0
0

0
4
Escaped character
This element makes sure escaped ` and $ characters are skipped
\\.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Closing `

`
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE
0

BT
php
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Variable

\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
{Variable}

({)\$[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?(?:->[A-Za-z_][A-Za-z0-9_]*+(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?)*+(})
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE
1
2

php
FALSE

0
0
TRUE
0
0
0
0
0
0
