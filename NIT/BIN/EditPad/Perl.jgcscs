JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Perl script
*.pl;*.pm
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.perl.org
FALSE
#

0
5
# EditPad's Perl scheme
sub Test {
  $string = "String $test";
  $number = 1234 if $string =~ m/regex/i;
}

1
0
0
4
0
37
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Single-quoted string
String delimited by single quotes.  Quotes can appear in the string if they are escaped with a \
(?<!\$)(')[^'\\\v]*+(?:\\(?:.|$)[^'\\\v]*+)*+(')?
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE
'
2
0
TRUE
0
0
0
0
0
0
Double-quoted string

(?<!\$)"
FALSE
TRUE
str
0


-1
10
2
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Command

(?<!\$)`
FALSE
FALSE
preproc
0


-1
35
3
FALSE
FALSE
FALSE
0

BT
code
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Double-slashed string
q// where the slash can be any non-word non-blank character (paired delimiters handled separately)
\m(?<![$-])(q\h*+([^([{<\w\s])).*?(?<!\\)(?:\\\\)*(\2)
FALSE
TRUE
str
0


-1
-1
14
FALSE
FALSE
FALSE
1
3
q//
code
FALSE
$2
2
0
TRUE
0
0
0
0
0
0
Parenthesized string
q() with arbitrarily nested ()
\m(?<![$-])(q\h*+\()
FALSE
TRUE
str
0


-1
5
14
FALSE
FALSE
FALSE
1

q()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Bracketed string
q[] with arbitrarily nested []
\m(?<![$-])(q\h*+\[)
FALSE
TRUE
str
0


-1
6
14
FALSE
FALSE
FALSE
1

q[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Braced string
q{} with arbitrarily nested {}
\m(?<![$-])(q\h*+\{)
FALSE
TRUE
str
0


-1
7
14
FALSE
FALSE
FALSE
1

q{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Angled string
q<> with arbitrarily nested <>
\m(?<![$-])(q\h*+<)
FALSE
TRUE
str
0


-1
8
14
FALSE
FALSE
FALSE
1

q<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Interpolated double-slashed string
qq// or qw// where the slash can be any non-word non-blank character (paired delimiters handled separately)
\m(?<![$-])(q[qw]\h*+([^([{<\w\s])).*?(?<!\\)(?:\\\\)*(\2)
FALSE
TRUE
str
0


11
-1
14
FALSE
FALSE
FALSE
1
3
qq//
code
FALSE
$2
2
0
TRUE
0
0
0
0
0
0
Interpolated parenthesized string
qq() or qw() with arbitrarily nested ()
\m(?<![$-])(q[qw]\h*+\()
FALSE
TRUE
str
0


-1
12
14
FALSE
FALSE
FALSE
1

qq()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Interpolated bracketed string
qq[] or qw[] with arbitrarily nested []
\m(?<![$-])(q[qw]\h*+\[)
FALSE
TRUE
str
0


-1
13
14
FALSE
FALSE
FALSE
1

qq[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Interpolated braced string
qq{} or qw{} with arbitrarily nested {}
\m(?<![$-])(q[qw]\h*+\{)
FALSE
TRUE
str
0


-1
14
14
FALSE
FALSE
FALSE
1

qq{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Interpolated angled string
qq<> or qw<> with arbitrarily nested <>
\m(?<![$-])(q[qw]\h*+<)
FALSE
TRUE
str
0


-1
15
14
FALSE
FALSE
FALSE
1

qq<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Double-slashed regex
m// or qr// where the slash can be any non-word non-blank character (paired delimiters handled separately)
\m(?<![$-])((?>m|qr)\h*+([^([{<\w\s])).*?(?<!\\)(?:\\\\)*(\2\w*)
FALSE
TRUE
patt
0


17
-1
15
FALSE
FALSE
FALSE
1
3
qq//
code
FALSE
$2
2
0
TRUE
0
0
0
0
0
0
Double-slashed regex
// without the m or qr.  We require the =~ or !~ operator, the .. range operator, a keyword, or an opening parenthesis to be present, so there's no confusion between // and the division operator
(?<=(?>[=!]~|\(|\.\.|\m(?>split|grep|if|unless|while|until|and|or|not|foreach|for))\s*)(/)[^/\\]*+(?:\\.[^/\\]*+)*+(/\w*)?
FALSE
FALSE
patt
0


17
-1
15
FALSE
FALSE
FALSE
1
2
s///
code
FALSE
/
2
0
TRUE
0
0
0
0
0
0
Parenthesized regex
m() with arbitrarily nested ()
\m(?<![$-])((?>m|qr)\h*+\()
FALSE
TRUE
patt
0


-1
22
15
FALSE
FALSE
FALSE
1

m()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Bracketed regex
m[] with arbitrarily nested []
\m(?<![$-])((?>m|qr)\h*+\[)
FALSE
TRUE
patt
0


-1
23
15
FALSE
FALSE
FALSE
1

m[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Braced regex
m{} with arbitrarily nested {}
\m(?<![$-])((?>m|qr)\h*+\{)
FALSE
TRUE
patt
0


-1
24
15
FALSE
FALSE
FALSE
1

m{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Angled regex
m<> with arbitrarily nested <>
\m(?<![$-])((?>m|qr)\h*+<)
FALSE
TRUE
patt
0


-1
25
15
FALSE
FALSE
FALSE
1

m<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Triple-slashed substitution
s/// tr/// y/// where the slash can be any non-word non-blank character (paired delimiters handled separately)
\m(?<![$-])((?>s|y|tr)\h*+([^([{<\w\s]))(?>.*?(?<!\\)(?:\\\\)*\2).*?(?<!\\)(?:\\\\)*(\2\w*+)
FALSE
TRUE
patt
0


17
-1
15
TRUE
FALSE
FALSE
1
3
s///
code
FALSE
$2$2
2
0
TRUE
0
0
0
0
0
0
Parenthesized substitution
s()() with arbitrarily nested ()
\m(?<![$-])((?>s|y|tr)\h*+\()
FALSE
TRUE
patt
0


-1
26
15
FALSE
FALSE
FALSE
1

m()
code
FALSE
)()
2
0
TRUE
0
0
0
0
0
0
Bracketed substitution
s[][] with arbitrarily nested []
\m(?<![$-])((?>s|y|tr)\h*+\[)
FALSE
TRUE
patt
0


-1
28
15
FALSE
FALSE
FALSE
1

m[]
code
FALSE
][]
2
0
TRUE
0
0
0
0
0
0
Braced substitution
s{}{} with arbitrarily nested {}
\m(?<![$-])((?>s|y|tr)\h*+\{)
FALSE
TRUE
patt
0


-1
30
15
FALSE
FALSE
FALSE
1

m{}
code
FALSE
}{}
2
0
TRUE
0
0
0
0
0
0
Angled substitution
s<><> with arbitrarily nested <>
\m(?<![$-])((?>s|y|tr)\h*+<)
FALSE
TRUE
patt
0


-1
32
15
FALSE
FALSE
FALSE
1

m<>
code
FALSE
><>
2
0
TRUE
0
0
0
0
0
0
Double-slashed command
qx// where the slash can be any non-word non-blank character (paired delimiters handled separately)
\m(?<![$-])(qx\h*+([^([{<\w\s])).*?(?<!\\)(?:\\\\)*(\2)
FALSE
TRUE
preproc
0


36
-1
3
FALSE
FALSE
FALSE
1
3
qx//
code
FALSE
$2
2
0
TRUE
0
0
0
0
0
0
Parenthesized command
qx() with arbitrarily nested ()
\m(?<![$-])(qx\h*+\()
FALSE
TRUE
preproc
0


-1
37
3
FALSE
FALSE
FALSE
1

qx()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Bracketed command
qx[] with arbitrarily nested []
\m(?<![$-])(qx\h*+\[)
FALSE
TRUE
preproc
0


-1
38
3
FALSE
FALSE
FALSE
1

qx[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Braced command
qx{} with arbitrarily nested {}
\m(?<![$-])(qx\h*+\{)
FALSE
TRUE
preproc
0


-1
39
3
FALSE
FALSE
FALSE
1

qx{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Angled command
qx<> with arbitrarily nested <>
\m(?<![$-])(qx\h*+<)
FALSE
TRUE
preproc
0


-1
40
3
FALSE
FALSE
FALSE
1

qx<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Interpolated here document
Properly finished here document.  A here document is started by an identifier preceded by << and terminated by the same identifier at the beginning of a line.
(<<"?+([A-Za-z0-9_]++)\M"?)+.*?^(\2)\M
FALSE
TRUE
str
0


2
-1
14
FALSE
FALSE
FALSE
1
3

code
FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated here document (open)
Here document of which the terminator is not present and therefore continues until the end of the file.
(<<"?+([A-Za-z0-9_]++)\M"?+).*+(?s:(\R).*+)?
FALSE
FALSE
str
0


2
-1
14
FALSE
FALSE
FALSE
1


code
FALSE
\3\2\3
1
0
TRUE
0
0
0
0
0
0
Here document
Properly finished non-interpolating here document.  A here document is started by an identifier preceded by << and terminated by the same identifier at the beginning of a line.
(<<'([A-Za-z0-9_]++)').*?^(\2)\M
FALSE
TRUE
str
0


1
-1
14
FALSE
FALSE
FALSE
1
3

code
FALSE

0
0
TRUE
0
0
0
0
0
0
Here document (open)
Non-interpolating here document of which the terminator is not present and therefore continues until the end of the file.
(<<'([A-Za-z0-9_]++)').*+(?s:(\R).*+)?
FALSE
FALSE
str
0


1
-1
14
FALSE
FALSE
FALSE
1


code
FALSE
\3\2\3
1
0
TRUE
0
0
0
0
0
0
Here document operator

<<
FALSE
FALSE
str
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
POD
POD Documentation
^=(?:head[12]|item|over|back|pod|for).*+\v++(?:(?!=cut|=end).*+\v*+)*+(?:=cut|=end)?+.*+
FALSE
FALSE
doccomm
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
40
Here document
0

2



0
0
4
1
The <<'HEREDOC' operator can be followed by other Perl code on the same line.  We highlight those by including the "Perl single line" subscheme.  Brace elements are duplicated to avoid automatic breaking.  The contents of the here document begin after the line break.  We highlight those with the "here document contents" element.
4
Here document operator

\G<<'[A-Za-z0-9_]++'
FALSE
FALSE
str
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Here document contents

^.*+
FALSE
FALSE
str
0


-1
-1
14
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Interpolated here document
0

2



0
0
4
1
The <<HEREDOC operator can be followed by other Perl code on the same line.  We highlight those by including the "Perl single line" subscheme.  Brace elements are duplicated to avoid automatic breaking.  The contents of the here document begin after the line break.  The "here document contents" matches the line break and toggles to the "interpolated here document contents" subscheme that highlights interpolated variables.
4
Here document operator

\G<<[A-Za-z0-9_]++
FALSE
FALSE
str
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Here document contents

\R
FALSE
FALSE
str
0


-1
3
1
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Interpolated here document contents
3
str
14



0
0

0
1
Variable
Don't forget the negative look-behind (?<!\\) to make sure the $ wasn't escaped!
(?<!\\)[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Perl single line
4
1
Perl syntax that could never span multiple lines shared between the main scheme and the subscheme for here documents.
9
Opening bracket

(?<!\$)\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

(?<!\$)]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

(?<!\$)\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

(?<!\$)\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Comment
Single-line comment starts with # and continues until the end of the line.  The # character can also appear in $#variable
(?<!\$)#.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?<!\$)(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
FALSE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Number
Integer, hexadecimal and binary
\m(?<!\$)(?:[0-9]++|0x[0-9a-fA-F]++|0b[01]++)\M
FALSE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Keyword

\m(?<!\$)(?>and|close(?:dir)?|cmp|die|do|else|elsif|eq|exit|for(?:each)?|g[et]|if|join|keys|last|le(?:ngth)?|local|l[ct]|my|next|ne|not?|open(?:dir)|or|our|package|print|readdir|require|return|require|shift|splice|split|stat|substr|sub|uc|undef|unless|until|use|values|warn|while|xor|BEGIN|END)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Don't quantify this to prevent the opening / of a regex being seen as an operator when it occurs immediately after =~
(?<!\$)[-.=+*/<>|&!~]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Parenthesized string
1
str
14



0
0

0
3
Escaped character

\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Nested

\(
FALSE
FALSE
str
0


-1
5
3
FALSE
FALSE
FALSE
0

q()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
q()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Bracketed string
1
str
14



0
0

0
3
Escaped character

\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Nested

\[
FALSE
FALSE
str
0


-1
6
3
FALSE
FALSE
FALSE
0

q[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
q[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Braced string
1
str
14



0
0

0
3
Escaped character

\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Nested

\{
FALSE
FALSE
str
0


-1
7
3
FALSE
FALSE
FALSE
0

q{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
q{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Angled string
1
str
14



0
0

0
3
Escaped character

\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Nested

<
FALSE
FALSE
str
0


-1
8
3
FALSE
FALSE
FALSE
0

q<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
q<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Interpolation
4
0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated string
1
str
14



0
0
9
0
1
Closing "

"
FALSE
FALSE
str
0


-1
0
3
FALSE
FALSE
FALSE

0
DQ
code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Interpolated slashed string
0
str
14



0
0

0
2
Escaped character

\\.
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Interpolated parenthesized string
1
str
14



0
0
9
0
2
Nested

\(
FALSE
FALSE
str
0


-1
12
3
FALSE
FALSE
FALSE
0

qq()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
qq()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Interpolated bracketed string
1
str
14



0
0
9
0
2
Nested

\[
FALSE
FALSE
str
0


-1
13
3
FALSE
FALSE
FALSE
0

qq[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
qq[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Interpolated braced string
1
str
14



0
0
9
0
2
Nested

\{
FALSE
FALSE
str
0


-1
14
3
FALSE
FALSE
FALSE
0

qq{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
qq{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Interpolated angled string
1
str
14



0
0
9
0
2
Nested

<
FALSE
FALSE
str
0


-1
15
3
FALSE
FALSE
FALSE
0

qq<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
qq<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Regex interpolation
4
0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
patt
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Slashed regex
0
patt
15



0
0

0
2
Escaped character

\\.
FALSE
FALSE
patt
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable
Exclude matches ending with \z so we don't color the regex flags in m%re%misx as a variable
[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+(?!\z)
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Parenthesized interpolation
1
patt
15



0
0
16
0
2
Nested

\(
FALSE
FALSE
patt
0


-1
18
3
FALSE
FALSE
FALSE
0

m()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

0
m()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Bracketed interpolation
1
patt
15



0
0
16
0
2
Nested

\[
FALSE
FALSE
patt
0


-1
19
3
FALSE
FALSE
FALSE
0

m[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

0
m[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Braced interpolation
1
patt
15



0
0
16
0
2
Nested

\{
FALSE
FALSE
patt
0


-1
20
3
FALSE
FALSE
FALSE
0

m{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

0
m{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Angled interpolation
1
patt
15



0
0
16
0
2
Nested

<
FALSE
FALSE
patt
0


-1
21
3
FALSE
FALSE
FALSE
0

m<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
patt
0


-1
-2
3
FALSE
FALSE
FALSE

0
m<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Parenthesized regex
1
patt
15



0
0
16
0
2
Nested

\(
FALSE
FALSE
patt
0


-1
18
3
FALSE
FALSE
FALSE
0

m()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Bracketed regex
1
patt
15



0
0
16
0
2
Nested

\[
FALSE
FALSE
patt
0


-1
19
3
FALSE
FALSE
FALSE
0

m[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Braced regex
1
patt
15



0
0
16
0
2
Nested

\{
FALSE
FALSE
patt
0


-1
20
3
FALSE
FALSE
FALSE
0

m{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Angled regex
1
patt
15



0
0
16
0
2
Nested

<
FALSE
FALSE
patt
0


-1
21
3
FALSE
FALSE
FALSE
0

m<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Parenthesized substitution 1
1
patt
15



0
0
16
0
3
Nested

\(
FALSE
FALSE
patt
0


-1
18
3
FALSE
FALSE
FALSE
0

m()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Part 2

(\))\s*+(\()
FALSE
FALSE
patt
0


-1
27
3
FALSE
FALSE
FALSE
2
1
m()
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing

\)
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Parenthesized substitution 2
1
patt
15



0
0
16
0
2
Nested

\(
FALSE
FALSE
patt
0


-1
18
3
FALSE
FALSE
FALSE
0

m()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Bracketed substitution 1
1
patt
15



0
0
16
0
3
Nested

\[
FALSE
FALSE
patt
0


-1
19
3
FALSE
FALSE
FALSE
0

m[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Part 2

(\])\s*+(\[)
FALSE
FALSE
patt
0


-1
29
3
FALSE
FALSE
FALSE
2
1
m[]
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing

\]
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Bracketed substitution 2
1
patt
15



0
0
16
0
2
Nested

\[
FALSE
FALSE
patt
0


-1
19
3
FALSE
FALSE
FALSE
0

m[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Braced substitution 1
1
patt
15



0
0
16
0
3
Nested

\{
FALSE
FALSE
patt
0


-1
20
3
FALSE
FALSE
FALSE
0

m{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Part 2

(\})\s*+(\{)
FALSE
FALSE
patt
0


-1
31
3
FALSE
FALSE
FALSE
2
1
m{}
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Braced substitution 2
1
patt
15



0
0
16
0
2
Nested

\{
FALSE
FALSE
patt
0


-1
20
3
FALSE
FALSE
FALSE
0

m{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Angled substitution 1
1
patt
15



0
0
16
0
3
Nested

<
FALSE
FALSE
patt
0


-1
21
3
FALSE
FALSE
FALSE
0

m<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Part 2

(>)\s*+(<)
FALSE
FALSE
patt
0


-1
33
3
FALSE
FALSE
FALSE
2
1
m<>
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Angled substitution 2
1
patt
15



0
0
16
0
2
Nested

<
FALSE
FALSE
patt
0


-1
21
3
FALSE
FALSE
FALSE
0

m<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>\w*+
FALSE
FALSE
patt
0


-1
0
3
FALSE
FALSE
FALSE

0
m<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
Command interpolation
4
0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Command
1
preproc
3



0
0
34
0
1
Closing `

`
FALSE
FALSE
preproc
0


-1
0
3
FALSE
FALSE
FALSE

0
BT
code
FALSE
`
2
0
TRUE
0
0
0
0
0
0
Slashed command
0
preproc
3



0
0

0
2
Escaped character
This element makes sure escaped " and $ characters are skipped.  Using lookbehind won't work, since (?<!\\)" would fail to match the closing " in "string\\"
\\.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

[$@%](?:[A-Za-z_][A-Za-z0-9_]*+|\d\M)(?:\{(?:\$[A-Za-z_][A-Za-z0-9_]*+|'[^'\v]++')\}|\[(?:\d++|\$[A-Za-z_][A-Za-z0-9_]*+)\])?+
FALSE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Parenthesized command
1
preproc
3



0
0
34
0
2
Nested

\(
FALSE
FALSE
preproc
0


-1
37
3
FALSE
FALSE
FALSE
0

qx()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing

\)
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE

0
qx()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Bracketed command
1
preproc
3



0
0
34
0
2
Nested

\[
FALSE
FALSE
preproc
0


-1
38
3
FALSE
FALSE
FALSE
0

qx[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing

\]
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE

0
qx[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Braced command
1
preproc
3



0
0
34
0
2
Nested

\{
FALSE
FALSE
preproc
0


-1
39
3
FALSE
FALSE
FALSE
0

qx{}
code
FALSE
}
2
0
TRUE
0
0
0
0
0
0
Closing

\}
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE

0
qx{}
code
FALSE
{
2
0
TRUE
0
0
0
0
0
0
Angled command
1
preproc
3



0
0
34
0
2
Nested

<
FALSE
FALSE
preproc
0


-1
40
3
FALSE
FALSE
FALSE
0

qx<>
code
FALSE
>
2
0
TRUE
0
0
0
0
0
0
Closing

>
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE

0
qx<>
code
FALSE
<
2
0
TRUE
0
0
0
0
0
0
