JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
JavaScript
*.js
Just Great Software
support@editpadpro.com
http://www.editpadpro.com

FALSE
//

1
Supports JavaScript, JScript and ECMA-262
5
// EditPad's JavaScript scheme
function Test() {
  Number = 1234;  String = 'abcdef';
  Regex = /regex/;
}

3
0
0

0
16
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment

/\*
FALSE
TRUE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

/**/
code
FALSE
*/
2
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkts
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Double-quoted string
Closing quote optional so an unclosed string is still colored as a string
(")[^"\\\v]*+(?:\\(?:.|\r?\n)[^"\\\v]*+)*+(")?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Single-quoted string
Closing quote optional so an unclosed string is still colored as a string
(')[^'\\\v]*+(?:\\(?:.|\r?\n)[^'\\\v]*+)*+(')?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE

2
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\m0x[0-9A-F]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++(?:ul?+|lu?+)?+\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?>E[+-]?+[0-9]++)?\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?>abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do(?:uble)?|else|enum|eval|export|extends|false|final(?:ly)?|float|for|function|goto|if|implements|import|in(?:stanceof|t(?:erface)?)?|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throws?|transient|true|try|typeof|var|void|volatile|while|with|yield)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Regex
A / that is preceded by a (, =, or : starts a regular expression.  The next unescaped / terminates the regex.
(?<=[(,=:](?:\s*+!)?+\s*+)(/)[^/\\\v]*+(?:\\.[^/\\\v]*+)*+(/)?
FALSE
FALSE
patt
0


-1
-1
7
FALSE
FALSE
FALSE
1
2

code
FALSE
/
0
0
TRUE
0
0
0
0
0
0
Operator

[-+*/=<>%&^|!~?]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
1
Multi-line comment
1
comm
2



0
0

0
1
Closing */

\*/
FALSE
FALSE
comm
0


-1
0
3
FALSE
FALSE
FALSE

0
/**/
code
FALSE
/*
0
0
TRUE
0
0
0
0
0
0
