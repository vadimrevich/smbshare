JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
PowerShell
*.ps1
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.microsoft.com/powershell
FALSE
#

0
4
# PowerShell
For ($i=1; $i -le 5; $i++) {
  Write-Host "Hello $World"
}

1
0
0

0
19
Requires comment

#requires.*+
FALSE
FALSE
preproc
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Comment

#.*+
FALSE
FALSE
comm
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Delimited comment

<#
FALSE
FALSE
comm
0


-1
1
3
FALSE
FALSE
FALSE
0

<##>
code
FALSE
#>
2
0
FALSE
0
0
0
0
0
0
Float

(?>\m[0-9]++\.[0-9]++|\.[0-9]++)(?:E[+-]?+[0-9]++)?+D?+\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Number
Integer, floating point and hexadecimal
\m(?>[0-9]++d?|0x[0-9a-fA-F]++)\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Cmdlet
Place this before Reserved Words so that Foreach-Object is highlighted as a CmdLet rather than as the foreach keyword
\m[a-z]++-[a-z]*+\M
TRUE
FALSE
func
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved Words

4
\m(?>assembly|base|begin|break|catch|class|command|configuration|continue|
data|define|do|dynamicparam|else(?:if)?|end|enum|exit|filter|finally|for(?:each)?|from|function|
hidden|if|in(?:linescript|terface)?|module|namespace|parallel|param|private|process|public|
return|sequence|static|switch|throw|trap|try|type|until|using|var|while|workflow)\M
TRUE
FALSE
keyword
0


-1
-1
3
TRUE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
2
Operators

[ \t]+-[a-z0-9_]++|[-+*/=]
TRUE
FALSE
op
0


-1
-1
1
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Opening brace

{
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

{}
code
FALSE
}
2
2
TRUE
0
0
0
0
0
0
Closing brace

}
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
{}
code
FALSE
{
2
3
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
2
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
2
0
TRUE
0
0
0
0
0
0
Variable

\$(?>[a-z_][a-z0-9_]*+|[$?^_])
TRUE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string

(')[^'\v]*+(')?
FALSE
FALSE
str
0


-1
-1
6
FALSE
FALSE
FALSE
1
2

code
FALSE
'
2
0
TRUE
0
0
0
0
57
0
Double-quoted string

"
FALSE
FALSE
str
0


-1
2
7
FALSE
FALSE
FALSE
0

DQ
code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Here string

@'$
FALSE
FALSE
str
0


-1
4
15
FALSE
FALSE
FALSE
0

SQ here
code
FALSE
'@
2
0
TRUE
0
0
0
0
0
0
Interpolated here string

@"$
FALSE
FALSE
str
0


-1
5
15
FALSE
FALSE
FALSE
0

DQ here
code
FALSE
"@
2
0
TRUE
0
0
0
0
0
0
0
5
Delimited comment
1
comm
0



0
0

0
2
End of comment

#>
FALSE
FALSE
comm
0


-1
0
1
FALSE
FALSE
FALSE

0
<##>
code
FALSE

0
0
FALSE
0
0
0
0
0
0
Section

^\.\w+
FALSE
FALSE
doccomm
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
FALSE
0
0
0
0
0
0
Interpolated String
1
str
6



53
0

0
6
Quote

""
FALSE
FALSE
str
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
End of string

"
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ
code
FALSE
"
2
0
TRUE
0
0
0
0
0
0
Unterminated string

$
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Escape

`.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$(?>[a-z_][a-z0-9_]*+|[$?^_])
TRUE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Expression

\$\(
FALSE
FALSE
preproc
0


-1
3
3
FALSE
FALSE
FALSE
0

expression
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Expression
1
preproc
3



0
0

0
2
End of expression

\)
FALSE
FALSE
preproc
0


-1
-2
3
FALSE
FALSE
FALSE

0
expression
code
FALSE
(
2
0
TRUE
0
0
0
0
0
0
Nested expression

\(
FALSE
FALSE
preproc
0


-1
3
3
FALSE
FALSE
FALSE
0

expression
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
Here String
1
str
14



0
0

0
1
End of here string

^'@$
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
SQ here
code
FALSE
@'
2
0
TRUE
0
0
0
0
0
0
Interpolated Here String
1
str
14



53
0

0
4
End of here string

^"@$
FALSE
FALSE
str
0


-1
-2
3
FALSE
FALSE
FALSE

0
DQ here
code
FALSE
@"
2
0
TRUE
0
0
0
0
0
0
Escape

`.
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Variable

\$(?>[a-z_][a-z0-9_]*+|[$?^_])
TRUE
FALSE
var
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Expression

\$\(
FALSE
FALSE
preproc
0


-1
3
3
FALSE
FALSE
FALSE
0

expression
code
FALSE
)
2
0
TRUE
0
0
0
0
0
0
