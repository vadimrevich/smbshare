JGCSCS
7
Download the Just Great Software Custom Syntax Coloring Scheme Editor from https://www.editpadpro.com/cscs.html to create and edit Just Great Software Custom Syntax Coloring Schemes
TRUE
Delphi Prism
*.pas
Just Great Software
support@editpadpro.com
http://www.editpadpro.com
http://www.embarcadero.com/products/delphi-prism
FALSE
//

1
Delphi Prism source code
7
{$DEFINE DOTNET}
// Delphi Prism
method MyClass.Test(X: Integer);
begin
  Number := 1234;  S := 'abcdef';
  EditPadRocks := true;
end;

1
0
0

0
22
Begin
Reserved words that pair up with "end"; "class" and "interface" are tricky because they only pair up with "end" in type definitions
\m(?>begin|case|record|try|(?<==\s*)(?:class|interface)(?!\s*+(?:(?:\([^);]*+\))?+\s*+;|of)))\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

beginend
code
FALSE
end
1
2
FALSE
0
0
0
0
0
0
End

\mend\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
beginend
code
FALSE
begin
0
3
FALSE
0
0
0
0
0
0
Repeat

\mrepeat\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE
0

repeatuntil
code
FALSE
until
0
2
FALSE
0
0
0
0
0
0
Until

\muntil\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE

0
repeatuntil
code
FALSE
repeat
1
1
FALSE
1
2
0
0
0
2
Property

\mproperty\M
TRUE
FALSE
keyword
0


-1
1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Event

\mevent\M
TRUE
FALSE
keyword
0


-1
3
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Reserved words

\m(?<![.&])(?>abstract|add|and|array\s+of|as(?:sembly|ync)?|break|class|const(?:ructor)?|delegate|div|do(?:wnto)?|else|empty|ensure|enum|except|exit|external|false|final(?:izer)?|flags|finally|for(?>\s+each(?>\s+matching)?)?|function|future|global|has|if|implementation|implements|implies|in(?:herited|line|terface|variants)?|is|iterator|locked|locking|loop|method|mod(?:ule)?|namespace|nested\s+in|new|nil|not(?:ify)?|nullable|of|old|on|operator|or|out|parallel|params|partial|pinned|override|private|procedure|protected|public|raise|require|result|sealed|self|sequence\s+of|set|shl|shr|static|step|then|to|true|type|unit|unsafe|uses|using|var|virtual|where|while|with(?>\s+matching)?|xor|yield)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Float

\m[0-9]++(?:\.[0-9]++(?:E[+-]?[0-9]++)?+|E[+-]?[0-9]++)\M
TRUE
FALSE
float
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Integer

\m[0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Hexadecimal number

\$[A-F0-9]++\M
TRUE
FALSE
int
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE
1
2
{$}

FALSE
}
0
0
TRUE
0
0
0
0
0
0
Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE
1
2
{}

FALSE
}
0
0
TRUE
0
0
0
0
0
0
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
comm
0


-1
2
3
FALSE
FALSE
FALSE
0

(**)

FALSE
*)
0
0
TRUE
0
0
0
0
0
0
Opening parenthesis

\(
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

()
code
FALSE
)
0
0
TRUE
0
0
0
0
0
0
Closing parenthesis

\)
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
()
code
FALSE
(
0
0
TRUE
0
0
0
0
0
0
Opening bracket

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE
]
0
0
TRUE
0
0
0
0
0
0
Closing bracket

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE
[
0
0
TRUE
0
0
0
0
0
0
Operator

[-+*@^<>=]++|/(?!/)|:=
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-quoted string
Closing ' optional so unclosed strings are colored until the end of the line
(')[^'\v]*+('?)
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE

0
0
TRUE
0
0
0
0
0
0
Double-quoted string
Closing ' optional so unclosed strings are colored until the end of the file
(")[^"]*+("?)
FALSE
FALSE
str
0


-1
-1
2
FALSE
FALSE
FALSE
1
2

code
FALSE

0
0
TRUE
0
0
0
0
0
0
Character

#(?:\$[A-F0-9]++|[0-9]++)\M
TRUE
FALSE
ch
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
0
3
Property
1

3



0
0

0
9
Reserved words
These words are only reserved in property definitions
\m(?>read|write|index|default|nodefault|array|sequence|of|true|false)\M
TRUE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
End of property definition

;
FALSE
FALSE

0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE
1
2
{$}

FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE
1
2
{}

FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
comm
0


-1
2
3
FALSE
FALSE
FALSE
0

(**)

FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Since // starts a single line comment, we must not match more than one operator character at the same time (i.e. no quantifier in the regex)
[-+*/:@^<>=]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Brackets

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Brackets

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE

0
0
TRUE
0
0
0
0
0
0
(*Comment*)
1
comm
2



0
0

0
1
Closing *)

\*\)
FALSE
FALSE
comm
0


-1
-2
3
FALSE
FALSE
FALSE

0
(**)

FALSE

0
0
TRUE
0
0
0
0
0
0
Event
1

3



0
0

0
9
Reserved words
These words are only reserved in event definitions
\m(?>add|remove|raise|private|protected|assembly|public|delegate)\M
FALSE
FALSE
keyword
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
End of property definition

;
FALSE
FALSE

0


-1
0
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Single-line comment

//.*+
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Compiler directive
Closing } optional so an unclosed directive is colored until the end of the file
({)\$[^}]*+(})?
FALSE
FALSE
preproc
0


-1
-1
3
FALSE
FALSE
FALSE
1
2
{$}

FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
Closing } optional so an unclosed comment is colored until the end of the file
({)[^}]*+(})?
FALSE
FALSE
comm
0


-1
-1
2
FALSE
FALSE
FALSE
1
2
{}

FALSE

0
0
TRUE
0
0
0
0
0
0
Multi-line comment
We use a toggle subscheme to find the closing tag for performance reasons, since we cannot use a possessive negated character class to skip over the commented text
\(\*
FALSE
FALSE
comm
0


-1
2
3
FALSE
FALSE
FALSE
0

(**)

FALSE

0
0
TRUE
0
0
0
0
0
0
Operator
Since // starts a single line comment, we must not match more than one operator character at the same time (i.e. no quantifier in the regex)
[-+*/:@^<>=]
FALSE
FALSE
op
0


-1
-1
3
FALSE
FALSE
FALSE




FALSE

0
0
TRUE
0
0
0
0
0
0
Brackets

\[
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE
0

[]
code
FALSE

0
0
TRUE
0
0
0
0
0
0
Brackets

]
FALSE
FALSE
brkt
0


-1
-1
3
FALSE
FALSE
FALSE

0
[]
code
FALSE

0
0
TRUE
0
0
0
0
0
0
